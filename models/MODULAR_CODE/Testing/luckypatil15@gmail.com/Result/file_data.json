[
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n       // avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        //avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320001.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    map<string,float> movie;\n    vector<string> mname;\n    string st;\n    int rating;\n    while(1)\n    {\n        cin>>st>>rating;\n        if(st == \"\"THE_END\"\")\n            break;\n            mname.push_back(st);\n            if(movie.find(st)!=movie.end())\n            {\n                movie[st]+=rating;\n            }\n            else{\n                \n                    movie[st]=rating;        \n            }\n    }\n    sort(mname.begin(),mname.end());\n    int count=1;\n    st=mname[0];\n    for(int i=1; i<mname.size() ;i++)\n    {\n        if(st==mname[i])\n        {\n            count++;\n            if(i==mname.size()-1)\n            {\n                 movie[st]=(float)movie[st]/count;\n                 break;\n            }\n        }\n        else{\n            movie[st]=(float)movie[st]/count;\n            st=mname[i];\n            count=1;\n             if(i==mname.size()-1)\n            {\n                 movie[st]=(float)movie[st]/count;\n                 break;\n            }\n        }\n    }\n    float maxi=movie[mname[0]];\n    string maxm=mname[0];\n    for(int i=1;i<mname.size();i++)\n    {\n        if(maxi<movie[mname[i]])\n        {\n            maxm=mname[i];\n            maxi=movie[mname[i]];\n            \n        }\n    }\n    cout<<maxm<<\"\" \"\";\n    printf(\"\"%.1f\"\", maxi);\n    \n    return 0;\n}",
    "name": "200240320003.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320007.cpp"
  }
]