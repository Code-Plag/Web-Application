[
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n       // avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        //avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320001.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\n#define MAIN_FUNCTION main\n#define CLASSES_class class\n#define FOR_LOOP for\n#define INTEGER int\n#define ANKIT return\n#define ppppppppppp public\n#define if_looop if\n#define else_Loop else\n#define console cout\n#define cinnnnnnn cin\n#define break_ifloop break\n#define MAP vector\n#define STD using namespace std\n#define LH {\n#define RH }\nSTD;\n\n void ABhishek()\n    LH\n       long long  int var = var+1;\n        double ar[50000];\n        while (var !=0)\n          {\n              var++;\n              var = var+1;\n          RH\n         \n    RH\n    \n    \n     void DADA()\n    LH\n       long long  int var = var+1;\n        double ar[50000];\n        while (var !=0)\n          LH\n              var++;\n              var = var+1;\n          RH\n         \n    RH\n\n void PRANAY()\n    LH\n       long long  int var = var+1;\n        double ar[50000];\n        while (var !=0)\n          LH\n              var++;\n              var = var+1;\n          RH\n         \n    RH\n     void ANKIT_suravkar()\n    LH\n       long long  int var = var+1;\n        double ar[50000];\n        string movName;\n    typedef float FLOAT;// stores movie name\n    FLOAT totRating; // stores sum total of all ratings\n    FLOAT totReviewer; // stores sum total of all reviewers\n\n        while (var !=0)\n          LH\n              var++;\n              var = var+1;\n          RH\n         \n    RH\n    \n       void YAShya()\n    LH\n       long long  int var = var+1;\n        double ar[50000];\n        do \n        LH\n            int v = 100;\n            \n          \n              var++;\n              var = var+1;\n          RH while (var !=0);\n        \n        \n        ANKIT_suravkar();\n          \n         \n    }\n    \n       void LAXUUUMANNNNNNNN()\n    LH\n       long long  int var = var+1;\n        double ar[50000];\n        while (var !=0)\n          LH\n              var++;\n              var = var+1;\n          RH\n          long long  int vaar = vaar+1;\n        double ara[50000];\n        while (vaar !=0)\n          LH\n              vaar++;\n              vaar = vaar+1;\n          RH\n         \n    RH\n    \n    \n    \nCLASSES_class MOVIE_RATING\nLH\nprivate:\n    string movName;\n    typedef float FLOAT;// stores movie name\n    FLOAT totRating; // stores sum total of all ratings\n    FLOAT totReviewer; // stores sum total of all reviewers\n\nppppppppppp:\n\n    MOVIE_RATING()  // zero parameter constructor\n    LH\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    RH\n    \n    MOVIE_RATING ( string movName, FLOAT totRating ) //parameterized constructor\n    LH\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    RH\n\n    //Getter-Setter Functions\n    FLOAT get_totRating()\n    LH\n        ANKIT totRating;\n    RH\n    void set_totRating(FLOAT totRating)\n    LH\n        this->totRating = totRating;\n    RH\n\n    string get_movName()\n    LH\n        ANKIT movName;\n    RH\n    FLOAT get_totReviewer()\n    LH\n        ANKIT totReviewer;\n    RH\n    void set_totReviewer() //function call increases reviewers by 1;\n    LH\n        totReviewer++;\n    RH\n\n    //average calculation function\n    FLOAT get_avgRating() // function to get avg rating\n    LH\n        FLOAT avg = totRating/totReviewer;\n       // avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        //avg = (FLOAT)avg / 10; // round off average to one decimal\n        ANKIT avg;\n    RH\nRH;\n\nINTEGER  DUMMY_FUNCTION()\nLH\n\nfor(INTEGER i = 0; i< 50; i++)\n        LH\n            if_looop(10 == 5)\n                return i; //return index of the vector where movie is present\n        RH\n        return -1; //returns -1 if movie not present\nRH       \nINTEGER search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    LH\n        INTEGER i=0;\n       /* for(int i = 0; i< movie_List.size(); i++)\n        LH\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        RH\n        return -1; //returns -1 if movie not present*/\n        while(i< movie_List.size())\n          {\n                if_looop(movie_List[i].get_movName() == current_movie)\n                ANKIT i; \n                i++;\n          RH\n          ANKIT -1;\n    RH\ndouble get_result(float max_avgRating)\nLH\n   console << fixed << setprecision(1)<<max_avgRating ;\nRH\n\nINTEGER MAIN_FUNCTION()\nLH\n    MAP <MOVIE_RATING> movie_List;\n    typedef float FLOAT;//vector to store all movies\n    typedef string STRING1;\n    FLOAT current_rating;\n    STRING1 current_movie;\n    while(true)\n    LH\n        cinnnnnnn >> current_movie; // stores current movie\n\n        if_looop(current_movie == \"\"THE_END\"\") //loop break condition\n            break_ifloop;\n        else_Loop\n        LH\n            cinnnnnnn >> current_rating; // stores current rating\n\n            INTEGER Movie_Index = search_Movie(current_movie, movie_List); //search if_looop movie is already in the vector\n\n            if_looop(Movie_Index == -1) // if movie not present in vector add movie in vector\n            LH\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            RH\n            else_Loop  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            LH\n                FLOAT new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            RH\n        RH\n    RH\n    //Code to find maximum avg rating according to dictionary order\n    FLOAT max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    FOR_LOOP(INTEGER i = 1; i < movie_List.size(); i++)\n    LH\n        string movie = movie_List[i].get_movName();\n        FLOAT rating = movie_List[i].get_avgRating();\n\n        if_looop( max_avgRating < rating ) // check for maximum avg rating\n        LH\n           max_avgRating = rating;\n           max_movie_name = movie;\n        RH\n        if_looop (max_avgRating == rating) // check if rating are equal\n        LH\n            if_looop( movie <  max_movie_name ) //change the movie name according to dictionary order\n            LH\n                max_movie_name = movie;\n            RH\n        RH\n    RH\n \n  \n    \n   console << max_movie_name << \"\" \"\";  // print movie name\n   get_result(max_avgRating);\n   //cout<< fixed << setprecision(1)<<max_avgRating; // print max avg rating upto 1 decimal\n   \n   ANKIT 0;\nRH",
    "name": "200240320002.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    map<string,float> movie;\n    vector<string> mname;\n    string st;\n    int rating;\n    while(1)\n    {\n        cin>>st>>rating;\n        if(st == \"\"THE_END\"\")\n            break;\n            mname.push_back(st);\n            if(movie.find(st)!=movie.end())\n            {\n                movie[st]+=rating;\n            }\n            else{\n                \n                    movie[st]=rating;        \n            }\n    }\n    sort(mname.begin(),mname.end());\n    int count=1;\n    st=mname[0];\n    for(int i=1; i<mname.size() ;i++)\n    {\n        if(st==mname[i])\n        {\n            count++;\n            if(i==mname.size()-1)\n            {\n                 movie[st]=(float)movie[st]/count;\n                 break;\n            }\n        }\n        else{\n            movie[st]=(float)movie[st]/count;\n            st=mname[i];\n            count=1;\n             if(i==mname.size()-1)\n            {\n                 movie[st]=(float)movie[st]/count;\n                 break;\n            }\n        }\n    }\n    float maxi=movie[mname[0]];\n    string maxm=mname[0];\n    for(int i=1;i<mname.size();i++)\n    {\n        if(maxi<movie[mname[i]])\n        {\n            maxm=mname[i];\n            maxi=movie[mname[i]];\n            \n        }\n    }\n    cout<<maxm<<\"\" \"\";\n    printf(\"\"%.1f\"\", maxi);\n    \n    return 0;\n}",
    "name": "200240320003.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\n#include <queue>\n#include<stack>\n\nusing namespace std;\nqueue<int> q1;\n\nint ginti=0;\n\nclass MOVIE_RATING\n{\n    private:\n    \n        string movName; // stores movie name\n        float totRating; // stores sum total of all ratings\n        float totReviewer; // stores sum total of all reviewers\n\n    public:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        ginti++;\n        q1.push(ginti);\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    { \n        ginti++;\n        q1.push(ginti);\n        return totRating;\n    }\n    \n    void set_totRating(float totRating)\n    {\n         ginti++;\n        q1.push(ginti);\n        this->totRating = totRating;\n    }\n   \n    string ThrowN()\n    {\n         ginti++;\n        q1.push(ginti);\n        return movName;\n    }\n    \n       string get_movName()\n    {\n         ginti++;\n        q1.push(ginti);\n       ThrowN();\n       return movName;\n    }\n   \n    \n    float throwR()\n    {\n         ginti++;\n        q1.push(ginti);\n        return totReviewer;\n    }\n     \n     \n     float get_totReviewer()\n    {\n         ginti++;\n        q1.push(ginti);\n        throwR();\n  \n    }\n      \n  \n    void INCr()\n    {\n         ginti++;\n        q1.push(ginti);\n         totReviewer++;\n    }\n\n\n  void set_totReviewer() //function call increases reviewers by 1;\n    {\n         ginti++;\n        q1.push(ginti);\n        \n       INCr();\n    }\n\n\n  float THROWavg()\n    {\n         ginti++;\n        q1.push(ginti);\n      float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;  \n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n         ginti++;\n        q1.push(ginti);\n        \n        THROWavg();\n    }\n      \n};\n\n  \n\n    int search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    { ginti++;\n        q1.push(ginti);\n      \n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n    \n            return i; \n            //return index of the vector where movie is present\n        }\n        \n        return -1; //returns -1 if movie not present   \n    }\n    \n\n int call() // just empty function\n    { ginti++;\n        q1.push(ginti);\n        return 1; // return 1\n    }\n\n   stack <int>s1;\n\n    int count(int x) \n    { ginti++;\n        q1.push(ginti);\n        s1.push(x);\n        for(int i=0;i<x;i++)\n        {\n            s1.push(i);            \n            call();  //call function callled\n        }\n    }\n\n\nint main()\n{       ginti++;\n        q1.push(ginti);\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    ginti++;\n    q1.push(ginti);\n    string current_movie;\n    count(10);\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n        ginti++;\n        q1.push(ginti);\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n                ginti++;\n                q1.push(ginti);\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        \n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    ginti++;\n        q1.push(ginti);\n    return 0;\n}",
    "name": "200240320006.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320007.cpp"
  }
]