[
 {
  "code": "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{   \n    std::multiset<int> ms ;//  8 7 9 1 2 3 4  --- 1 2 3 4 7 8 9\n    std::vector<int>vec;// 2 3 4 \n    for(int i=0;i<5;i++){\n        int data;\n        cin>>data;\n        ms.insert(data);\n    }\n    for(int i=0;i<5;i++){\n        int data;\n        cin>>data;\n        vec.push_back(data);\n    }\n    \n    for(int i=0;i<vec.size();i++){\n        int counter = 0;\n        auto end = ms.upper_bound(vec[i]);\n        counter = distance(ms.begin(),end);\n        cout << vec[i] <<\" ---\"<< counter << endl;\n    }\n    return 0;\n  \n}\n\n\n\n\n\n",
  "name": "a.cpp"
 },
 {
  "code": "#include<iostream>\n#include<map>\n#include<cstring>\n#include<string.h>\n#include<vector>\nusing namespace std;\nmap <string,int> map2;\nstring comb(string s){\n    string palindrome = \"\";\n    for(int i=s.length()-1 ; i >= 0 ; i--){\n        \n        palindrome = palindrome + s[i];\n    }\n\n    return palindrome;\n}\n\nvoid permutation(string str,string prefix){\n    if(str.length()== 0){\n        map2[prefix]++;\n    }\n    for(int i = 0 ; i < str.length() ; i++){\n        string rem = str.substr(0,i)+str.substr(i+1);\n        permutation(rem,prefix+str[i]);\n    }\n}\nint main(){\n    int t; // no of test cases\n    cin >> t; \n    for(int i = 0 ; i < t ; i++){// \n        string str;\n        cin >> str ;\n        map<char,int>map1; // map to check frequencies of the characters\n        for(int j = 0 ; j < str.length() ; j++){\n            map1[str[j]]++;\n        }\n      //to manipulate the palindrome taking array\n        char ch[str.length()];\n        int l = 0 ;   //l index that puts the repeating characters at start and end\n        bool flag = false; // flag to leave the  loop as no word can be palindrome if it has 2 characters having odd frequency\n        bool no_palindrome_flag = false;// to print the no palindrome statement\n      // for loop over map\n        for(auto x : map1 ){\n            if( (x.second) % 2 == 0 ){ // condition in which frequency is even\n                int n =x.second;\n                while( n != 0){\n                    ch[l]=x.first;                  // to put a letter at start\n                    ch[(str.length()-1)-l]=x.first; // to put letter at end\n                    l++;\n                    n=n-2;\n                }\n            }\n            else if((x.second) % 2 != 0  && flag == false){ // condtion in which frequency is odd\n                flag = true; \n                int n = x.second;                   \n                ch[(str.length()-1) / 2] =x.first; //to put the letter havingodd frequency at centre\n                n--;\n                while(n!=0){\n                    ch[l]=x.first;\n                    ch[(str.length()-1)-l]=x.first;\n                    l++;\n                    n=n-2;\n                }\n            }\n            else{ // condition for braking loop\n                no_palindrome_flag = true;\n                break;\n            }\n        }\n        if(no_palindrome_flag){\n            cout << \"No Palindrome\" << endl;\n        }\n        \n        else if(str.length()%2 == 0){\n            int counter=1;\n            string main(ch);\n            int centre_pos = (str.length()/2)-1;\n            string centre_part = main.substr(centre_pos,centre_pos+1);\n            string permute= main.substr(0,centre_pos+1);\n            permutation(permute,\"\");\n            cout<<\"All Palindromes of the given string : \"<<str <<endl;\n            for(auto Y : map2){\n                string temp = Y.first;\n                string palindrome = comb(temp);\n                string output = temp  + palindrome ;\n                cout <<counter++<<\"-\"<<output <<endl;\n            }\n        }\n\n        else if(str.length()%2 != 0){\n            int counter=1;\n            string main1(ch);\n            string main = main1;\n            int centre_pos = (str.length()/2);\n            string centre_part = \"\";\n            centre_part=main[centre_pos];\n            string permute= main.substr(0,centre_pos);\n            permutation(permute,\"\");\n            cout<<\"All Palindromes of the given string : \"<<str <<endl;\n            for(auto Y : map2){\n                string temp = Y.first;\n                string palindrome = comb(temp);\n                string output = temp + centre_part + palindrome ;\n                cout <<counter++<<\"-\"<<output <<endl;\n            }\n        }\n    }\n\n  \n    return 0;\n}",
  "name": "creating_palindrome.cpp"
 },
 {
  "code": "#include<iostream>\n#include<map>\n#include<cstring>\n#include<string.h>\n#include<vector>\nusing namespace std;\n\nvector<string>vec;\n\n\nvoid permutation(string str,string prefix){//laxman -- l axman\n    if(str.length()== 0){\n       // map2[prefix]++;\n        vec.push_back(prefix);\n        cout<<prefix<<endl;\n    }\n    for(int i = 0 ; i < str.length() ; i++){\n        string rem = str.substr(0,i)+str.substr(i+1);// l axman-- la xman-- lax man laxman// 2nd la xman\n        permutation(rem,prefix+str[i]);// xman \n    }\n}\nint main(){\n    string s1=\"abcdefghi\";\n    permutation(s1,\"\");\n    cout<<vec.size()<<endl;\n    return 0;\n}",
  "name": "permutation.cpp"
 },
 {
  "code": "#include<iostream>\nusing namespace std;\nint main(){\n    int arr[]={1,5,2,3,4};\n    int counter = 0;\n     int index=0;\n    for(int  i = 0 ; i < 5 ; i++ ){\n       index=i;\n        int count = 0;\n        bool flag = false;\n        counter++;\n        for(int  j= i+1 ;j<5;j++){\n            if(arr[j] < arr[index]){\n                index = j;\n                flag=true;\n            }\n            if(arr[j]<arr[j+1] && j < 5-1){\n                count++;\n            }\n        }\n        if(flag==false && count==4-(i+1)){\n            cout<<\"i broke \"<<endl;\n            break;\n        }\n        swap(arr[index],arr[i]);\n    }\n    for (int i = 0; i < 5; i++)\n    {\n        cout<<arr[i]<<endl;\n    }\n    cout <<\"counter\" <<counter<<endl;\n    return 0;\n\n}",
  "name": "selection_sort.cpp"
 }
]