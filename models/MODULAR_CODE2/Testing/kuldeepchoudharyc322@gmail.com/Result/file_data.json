[
 {
  "code": "#include<iostream>\r\n#include<vector>\r\n#include<cstring>\r\nusing namespace std;\r\nclass Match\r\n{\r\n\tprivate:\r\n\t\tint ip;\r\n\t\tint it;\r\n\t\tint len;\r\n\t\tstring m;\r\n\tpublic:\r\n\t\tMatch(){}\r\n\t\tMatch(int ip,int it,int len,string m){\r\n\t\t\tthis->ip=ip;\r\n\t\t\tthis->it=it;\r\n\t\t\tthis->len=len;\r\n\t\t\tthis->m=m;\r\n\t\t}\r\n\t\tint getip(){\r\n\t\t\treturn ip;\t\r\n\t\t}\r\n\t\tint getit(){\r\n\t\t\treturn it;\r\n\t\t}\r\n\t\tint getlen(){\r\n\t\t\treturn len;\r\n\t\t}\r\n\t\tstring getmatch(){\r\n\t\t\treturn m;\r\n\t\t}\r\n\t\t\r\n};\r\nclass Greedy\r\n{\r\n\tprivate:\r\n\t\tstring tile;\r\n\t\tstring p;\r\n\t\tstring t;\r\n\t\tint sen;\r\n\t\tint *visp;\r\n\t\tint *vist;\r\n\t\tvector<Match>matches;\r\n\t\tvector<Match>tiles;\r\n\tpublic:\r\n\t\tGreedy(string p,string t,int sen){\r\n\t\t\tthis->p=p;\r\n\t\t\tthis->t=t;\r\n\t\t\tvisp=new int[p.length()];\r\n\t\t\tvist=new int[t.length()];\r\n\t\t\ttile=\"\";\r\n\t\t\tthis->sen=sen;\r\n\t\t\tfor(int i=0;i<p.length();i++)\r\n\t\t\tvisp[i]=0;\r\n\t\t\tfor(int i=0;i<t.length();i++)\r\n\t\t\tvist[i]=0;\r\n\t\t}\r\n\t\tint isoccluded(Match m){\r\n\t\t\tint flag=0;\r\n\t\t\tfor(int i=m.getip();i<(m.getip()+m.getlen());i++){\r\n\t\t\t\tif(visp[i]==1){\r\n\t\t\t\t\tflag=1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(flag==0){\r\n\t\t\t\tfor(int i=m.getit();i<(m.getit()+m.getlen());i++){\r\n\t\t\t\t\tif(vist[i]==1){\r\n\t\t\t\t\t\tflag=1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(flag==1)\r\n\t\t\treturn  0;\r\n\t\t\telse \r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t\tvoid greedy_sting_tiling (){\r\n\t\t\tint length_oftoken=0;\r\n\t\t\tint maxmatch=0;\r\n\t\t\tint n1=p.length();\r\n\t\t\tint n2=t.length();\r\n\t\t\tdo{\r\n\t\t\t\tmaxmatch=sen;\r\n\t\t\t\tfor(int i=0;i<n1 /*&& visp[i]==0*/;i++){//a b g h h h g\r\n\t\t\t\t\tfor(int j=0;j<n2 /*&& vist[j]==0*/;j++){// a f b g h g\r\n\t\t\t\t\t\tint currentlen=0;\r\n\t\t\t\t\t\tstring temp=\"\";\r\n\t\t\t\t\t\twhile(p[i+currentlen]==t[j+currentlen] && visp[i+currentlen]==0 && vist[j+currentlen]==0){\r\n\t\t\t\t\t\t\ttemp=temp+p[i+currentlen];\r\n\t\t\t\t\t\t\tcurrentlen++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(currentlen==maxmatch){\r\n\t\t\t\t\t\t\tmatches.push_back(Match(i,j,currentlen,temp));\r\n\t\t\t\t\t\t\ttemp=\"\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(currentlen>maxmatch){// 8 9 10 11\r\n\t\t\t\t\t\t\tmatches.clear();\r\n\t\t\t\t\t\t\tmatches.push_back(Match(i,j,currentlen,temp));\r\n\t\t\t\t\t\t\ttemp=\"\";\r\n\t\t\t\t\t\t\tmaxmatch=currentlen; \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor(int i=0;i<matches.size();i++){\r\n\t\t\t\t\t//cout<<\"match= \"<<matches[i].getmatch()<<\" | ip = \"<<matches[i].getip()<<\" | it = \"<<matches[i].getit()<<\" | length = \" <<matches[i].getlen()<<endl; \r\n\t\t\t\t\tif(isoccluded(matches[i])){\r\n\t\t\t\t\t\tfor(int j=0;j<matches[i].getlen()-1;j++){\r\n\t\t\t\t\t\t\tvisp[matches[i].getip()+j]=1;\r\n\t\t\t\t\t\t\tvist[matches[i].getit()+j]=1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttiles.push_back(matches[i]);\r\n\t\t\t\t\t\tlength_oftoken=length_oftoken+maxmatch;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twhile(maxmatch>sen);\r\n\t\t}\r\n\t\tvoid tiling(){\r\n\t\t\tcout<<\"Matches\"<<endl;\r\n\t\t\tcout<<\"-----------------\"<<endl;\r\n\t\t\tfor(int i=0;i<tiles.size();i++){\r\n\t\t\t\tcout<<\"Tile = \"<<tiles[i].getmatch()<<\"| ip = \"<<tiles[i].getip()<<\" | it= \"<<tiles[i].getit()<<\"| length\"<<tiles[i].getlen()<<endl;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\r\n};\r\nint main(){\r\n\tcout<<\"Enter the first string : \"<<endl;\r\n\tstring s1;\r\n\tcin>>s1;\r\n\tcout<<\"Enter the second string : \"<<endl;\r\n\tstring s2;\r\n\tcin>>s2;\r\n\tcout<<\"Enter the sensitivity\"<<endl;\r\n\tint sen;\r\n\tcin>>sen;\r\n\tGreedy g1(s1,s2,sen);\r\n\tg1.greedy_sting_tiling();\r\n\tg1.tiling();\r\n\treturn 0;\r\n\t\r\n}\r\n",
  "name": "greedy_string_tiling_basic.cpp"
 },
 {
  "code": "// C++ program to print all possible \r\n// substrings of a given string \r\n#include<bits/stdc++.h> \r\nusing namespace std; \r\n\r\n// Function to print all sub strings \r\nvoid subString(string s, int n) \r\n{ \r\n\t// Pick starting point in outer loop \r\n\t// and lengths of different strings for \r\n\t// a given starting point \r\n\tfor (int i = 0; i < n; i++) \r\n\t\tfor (int len = 1; len <= n - i; len++) \r\n\t\t\tcout << s.substr(i, len) << endl; \r\n} \r\n\r\n// Driver program to test above function \r\nint main() \r\n{ \r\n\tstring s = \"abcd\"; \r\n\tsubString(s,s.length()); \r\n\treturn 0; \r\n} \r\n",
  "name": "stringlength.cpp"
 }
]