[
 {
  "code": "#include<iostream>\nusing namespace std;\n\nclass node\n{\n    \n        int data;\n        node *next;\n    public:\n        friend class linklist;\n};\nclass linklist\n{\n    private:\n        node *head;\n    public :\n        linklist()\n        {\n            head = NULL;\n        }\n        node* gethead()\n       {\n         return head;\n       }\n       ~linklist()\n       {\n           while(head != NULL)\n           {\n               node *temp = head;\n               head = head -> next;\n               delete temp;\n           }\n       }\n\n    void AddFirst(int d)\n    {\n        node *newnode;\n        int data;\n        newnode = new node;\n        newnode -> data = d;\n        newnode -> next = NULL;\n        \n        if (head == NULL)\n        {\n            head = newnode;\n        }\n        else\n            {\n             newnode-> next = head;\n             head = newnode;\n            }\n    }\n    \n     void AddLast(int d)\n    {\n        node *newnode;\n        int data;\n        newnode = new node;\n        newnode -> data = d;\n        newnode -> next = NULL;\n            if(head==NULL)\n            {\n                  head = newnode;\n            }\n            else\n            {\n                 node *temp;\n                 temp=head;\n                while(temp->next != NULL)\n                {   \n                    temp = temp->next;\n                }\n                temp->next = newnode;\n            }\n    }\n    \n    void AddNodeAfter(int after, int d)\n    {\n       node*newnode;\n       newnode = new (node);\n        newnode -> data = d;\n        newnode -> next = NULL;\n        node *temp;\n        temp = head;\n            while(temp != NULL && temp -> data != after)\n            {\n                temp = temp -> next;\n            }\n            if (temp==NULL)\n            {\n                \n            }\n            else\n            {\n                newnode -> next = temp-> next;\n                temp-> next = newnode;\n            }\n    }\n    \n    void AddNodeBefore(int before, int d)\n    {\n            \n        node *newnode;\n        int data;\n        newnode = new node;\n        newnode -> data = d;\n        newnode -> next = NULL;\n        if (head == NULL)\n        {\n            head = newnode;\n        }\n        else \n        {\n            node *t1;\n            node *t2;\n            t1 =t2 = head;\n            \n        while (t1 != NULL && t1->data != before)\n        {\n            t2 =t1;\n            t1 = t1->next;\n        }\n        if (t1 == head)\n        {\n             newnode -> next= t1;\n               head = newnode;\n        }\n        else if (t1 != NULL)\n        {\n           newnode-> next =t1;\n           t2->next= newnode;\n        }\n        else if(t1==NULL)\n        {\n            \n        }\n        \n        }\n    }\n\nvoid DelNode(int after)\n    {\n        node *t1;\n        node *t2;\n        t1 =t2 = head;\n        while (t1->data != after)\n        {\n            t2 =t1;\n            t1 = t1-> next;\n        }\n        t2-> next = t1-> next;\n        t1-> next = NULL;\n        delete [] t1;\n        \n    }\n  void Rev(node *temp)\n\n    {\n        \n        if(temp == NULL)\n            return ;\n        \n      Rev(temp->next);\n        cout<<temp->data<<\" \";\n    }\n    void print()\n    {\n        node *trav;\n        trav = head;\n        while(trav != NULL)\n            {\n                cout<<trav->data<<\" \";\n                trav = trav -> next;\n            }\n        cout<<endl;\n    }\nvoid delafter(int after)\n    {\n        node * temp;\n        node *t2;\n        temp = head;\n        t2 = NULL;\n        while ( (temp != NULL) && (temp->data != after) )\n        {\n            temp = temp->next;\n        }\n        if (temp == NULL)\n        {\n            t2 == NULL;\n        }\n       else if(temp->next == NULL)\n        {\n            return;\n        }\n        else\n        {\n            t2 = temp->next;\n             temp->next =  t2->next;    \n             t2 ->next =NULL;\n            //t3 = NULL;\n            delete [] t2;\n\n        }\n\n\n    }\nvoid delbefore(int before)\n     {\n         node * t1;\n         node * t2;\n        node *t3;\n        t1 = head;\n        t2 = head;\n        t3 = head;\n    while( (t1 != NULL) && (t1->data != before) )\n        {\n            t3 = t2;\n            t2 = t1;\n            t1 = t1->next;\n        }\n    if (t1 == NULL)\n        {\n            t3 = NULL;\n            t2 = NULL;\n        }\n      if (t1 == head)\n        {\n            t3 = NULL;\n            t2 = NULL;\n        }\n     else if(t2 == head && t3 == head)\n        {\n           this-> head = t1;\n            t2->next = NULL;\n             t3 = NULL;\n            t2 = NULL;\n        }\n     else if (t1 != NULL)\n        {\n            t3->next = t1;\n            t2->next = NULL;\n             t3 = NULL;\n            t2 = NULL;\n        }\n    \n\n    }\n\n    void fancy()\n    {\n        node*temp = head;\n        while(temp != NULL)\n        {\n            if (temp->next != NULL)\n            {\n                cout<<temp->data<<\"->\";\n                temp = temp->next;    \n            }\n        else if (temp->next == NULL)\n            {\n                 cout<<temp->data<<endl;\n                  temp = temp->next;   \n            }\n        }\n\n    }\n};\n\nint main()\n{\n    linklist l1;\n    int data1;\n  \n    string s;\n    while (1)\n    {\n        cin>>s;\n        if (s==\"AB\")\n         {\n             cin>>data1;\n             l1.AddFirst(data1);\n         }\n          if (s==\"AE\")\n         {\n             cin>>data1;\n             l1.AddLast(data1);\n         }\n          if (s==\"PR\")\n         {\n             l1.print();\n         }\n         \n        if(s==\"EXIT\")\n         {\n             break;\n         }\n         if(s==\"AMA\")\n         {\n               int d;\n             cin>>d;\n             cin>>data1;\n             l1.AddNodeAfter(d,data1);\n         }\n          if(s==\"AMB\")\n         {\n               int d;\n             cin>>d;\n             cin>>data1;\n             l1.AddNodeBefore(d,data1);\n         }\n         if (s==\"DN\")\n         {\n             int d;\n             cin>>d;\n             l1.DelNode(d);\n         }\n        if(s==\"RPR\")\n        {\n            \n             l1.Rev(l1.gethead());\n        }\n         if(s==\"FPR\")\n        {\n            \n             l1.fancy();\n        }\n        if(s==\"DNA\")\n        {\n            int after;\n            cin>>after;\n            l1.delafter(after);\n        }\n        if(s==\"DNB\")\n        {\n            int af;\n            cin>>af;\n            l1.delbefore(af);\n        }\n        \n        \n    }\n    return 0;\n}",
  "name": "200240320002_linklist.cpp"
 },
 {
  "code": "#include<iostream>\nusing namespace std;\nclass Node\n{\n    private:\n        int data;\n        Node *next;\n    public:\n        Node(int a)\n        {\n            data=a;\n            next=NULL;\n            \n        }\n    \n        int getData()\n        {\n            return data;\n        }\n        Node* getNext()\n        {\n            return next; \n        }\n        void setNext(Node* n)\n        {\n            next=n;\n        }\n};\n    \nclass Linklist\n{\n    private:\n        Node* head;\n        \n    public:\n        Linklist()\n        {\n            head=NULL;\n        }\n            \n        void insertB(int d)\n        {  \n            Node* nd=new Node(d);\n\n            if(head==NULL)\n                {\n                    head=nd;\n                }\n            else{\n                    nd->setNext(head);\n                    head=nd;\n                }\n        }\n        \n        void insertE(int d)\n        {\n            Node* nd=new Node(d);\n            Node* temp=head;\n            \n            if(head==NULL)\n            {\n                head=nd;\n            }\n            else{\n                    while(temp->getNext()!=NULL)\n                    {\n                        temp=temp->getNext();\n                    }\n                        temp->setNext(nd);\n            }\n        }\n        \n        int insertMA(int d, int a)\n        {\n            Node* nd=new Node(a);\n            \n            if(nd==NULL)\n            {\n                return 0;\n            }\n            \n            if(head==NULL)\n            {\n                head=nd;\n            }\n            else{    \n                    if(head->getData()==d)\n                    {\n                        if(head->getNext()==NULL)\n                        {\n                            head->setNext(nd);\n                        }\n                        else{\n                                nd->setNext(head->getNext());\n                                head->setNext(nd);\n                            }\n                    }  \n                 else{\n                            Node* temp=head;\n                            temp=temp->getNext();                    \n                            \n                            while(temp->getData()!=d)\n                            {\n                                if(temp->getNext()==NULL)\n                                {\n                                    return 0;\n                                }\n                                temp=temp->getNext();\n                            }\n                                nd->setNext(temp->getNext());\n                                temp->setNext(nd);\n                           \n                        }  \n            }  \n            \n        }\n        \n    int insertMB(int d,int b)\n    {\n        Node* nd=new Node(b);\n        if(nd==NULL)\n        {\n            return 0;\n        }\n        \n        if(head==NULL)\n        {\n            head=nd;\n        }\n        else{\n                if(head->getData()==d)\n                {\n                    nd->setNext(head);\n                    head=nd;\n                }\n                else{\n                    \n                        Node* temp=head;\n                        Node* prev;\n                        while(temp->getData()!=d)\n                        {\n                            if(temp->getNext()==NULL)\n                            {\n                                return 0;\n                            }\n                                prev=temp;\n                                temp=temp->getNext();\n                        }\n                        nd->setNext(temp);\n                        prev->setNext(nd);\n                }                \n        }\n        \n    }\n    \n    int Delete(int d)\n    {\n        Node* temp=head;\n        Node* prev=temp;\n        if(head==NULL)\n        {\n            return 0;\n        }\n        \n        if(head->getData()==d)\n        {  \n            if(head->getNext()==NULL)\n            {\n                delete temp;\n                head=NULL;\n                return 0;\n            }\n            head=head->getNext();\n            delete temp;\n        }\n        else{\n                temp=temp->getNext();\n                while(temp->getData()!=d)\n                {\n                    if(temp->getNext()==NULL)\n                    {\n                        return 0;\n                    }\n                        prev=temp;\n                        temp=temp->getNext();                        \n                }\n                if(temp->getNext()==NULL)\n                {\n                    prev->setNext(NULL);\n                    delete temp;\n                    return 0;\n                }\n                    prev->setNext(temp->getNext());\n                    delete temp;\n            }\n    }\n    \n    int deleteA(int d)\n    {\n        Node* temp=head;\n        Node* prev=temp;\n        if(head==NULL)\n        {\n            return 0;\n        }\n        \n        if(head->getData()==d)\n        {   \n            if(head->getNext()==NULL)\n            {   \n                return 0;\n            }\n        else{\n                temp=temp->getNext();\n                prev->setNext(temp->getNext());\n                delete temp;\n            }\n        }\n        else{\n                temp=temp->getNext();\n                prev=temp;\n                while(temp->getData()!=d)\n                {\n                    if(temp->getNext()==NULL)\n                    {\n                        return 0;\n                    }\n                \n                prev=temp;\n                temp=temp->getNext();\n                }\n                \n                if(temp->getNext()==NULL)\n                {\n                    return 0;\n                }\n                else{\n                        prev=temp;\n                        temp=temp->getNext();\n                        \n                        if(temp->getNext()==NULL)\n                        {\n                            prev->setNext(NULL);\n                            delete temp;\n                        }\n                        else{\n                                prev->setNext(temp->getNext());\n                                delete temp;\n                            }\n                }\n        }\n    \n    }\n    \n    int deleteB(int d)\n    {\n        Node* temp=head;\n        Node* prev=temp;\n        \n        if(head==NULL)\n        {\n            return 0;\n        }\n        \n        if(head->getData()==d)\n        {\n            return 0;\n        }\n        else{\n                temp=temp->getNext();\n                \n                if(temp->getData()==d)\n                {\n                    head=temp;\n                    delete prev;\n                    return 0;\n                }\n                \n                while(temp->getNext()->getData()!=d)\n                {\n                    if(temp->getNext()->getNext()==NULL)\n                    {\n                        return 0;\n                    }\n                        prev=temp;\n                        temp=temp->getNext();                        \n                }\n                \n                prev->setNext(temp->getNext());\n                delete temp;\n        }\n    }   \n    \n     void print()\n     {\n         Node *temp=head;\n        if(head==NULL)\n        {\n            return;\n        }\n        else{    \n                while(temp->getNext()!=NULL)\n                {\n                     cout<<temp->getData()<<\" \";\n                     temp=temp->getNext();\n                    \n                }   \n                    cout<<temp->getData()<<endl;\n             }\n        }\n            \n     void Fprint()\n     {\n         Node *temp=head;\n    \n        if(head==NULL)\n        {\n            return;   \n        }\n        else{    \n                while(temp->getNext()!=NULL)\n                {   \n        \n                     cout<<temp->getData()<<\"->\";\n                     temp=temp->getNext();\n                }   \n                    cout<<temp->getData()<<endl;\n            }\n     }\n     \n        \n    void Rprint(Node* h)\n    {\n       if(h==NULL)\n        return;\n        \n        Rprint(h->getNext());\n        cout<<h->getData()<<\" \";\n        \n    } \n    \n    Node* gethead()\n    {\n        return head;\n    }\n            \n};\n\nint main()\n{\n    Linklist l;\n    int c=0;\n    \n    while(1)\n    {\n        string cmd;\n        char s[20];\n        int d;\n        cin>>cmd;\n        \n        if(cmd==\"AB\")\n        {  \n            c++;\n            cin>>d;            \n            l.insertB(d);\n            continue;\n        }\n        \n        if(cmd==\"AE\")\n           {  \n                c++;\n                cin>>d;\n                l.insertE(d);\n                continue;\n            }\n        if(cmd==\"AMA\")\n            {   int a;\n                c++;\n                cin>>d>>a;\n                l.insertMA(d,a);\n                continue;\n            }\n        if(cmd==\"AMB\")\n            {   \n                c++;\n                int a;\n                cin>>d>>a;\n                l.insertMB(d,a);\n                continue;\n            }\n        if(cmd==\"DN\")\n            {\n                cin>>d;\n                l.Delete(d);\n            }\n        if(cmd==\"DNA\")\n            {\n                cin>>d;\n                l.deleteA(d);\n                continue;\n            }\n        if(cmd==\"DNB\")\n            {\n                cin>>d;\n                l.deleteB(d);\n                continue;\n                \n            }  \n         if(cmd==\"PR\")\n           {\n                l.print();\n                continue;\n            }\n        if(cmd==\"FPR\")\n            {\n                l.Fprint();\n                continue;\n            }\n        if(cmd==\"RPR\")\n            {\n                l.Rprint(l.gethead());\n                cout<<endl;\n                continue;\n            }  \n\n        if(cmd==\"EXIT\")\n            {\n                break;\n            }\n    }   \n        return 0;\n}",
  "name": "200240320003_linklist.cpp"
 },
 {
  "code": "#include<iostream>\n#include<cstring>\n#include<stdlib.h>\n\nusing namespace std;\n\nclass Node\n{\nprivate:\n    int data;\n    Node *next;\npublic:\n    Node()\n    {\n        data=0;\n        next=NULL;\n    }\n\n    Node(int data)\n    {\n        this->data=data;\n        next=NULL;\n    }\n\n    int getdata()\n    {\n        return data;\n    }\n\n    Node* getnext()\n    {\n        return next;\n    }\n\n    void setnext(Node *next)\n    {\n        this->next=next;\n    }\n};\n\nclass List\n{\nprivate:\n    Node *head;\npublic:\n    List()\n    {\n        head=NULL;\n    }\n\n    void AB(int data)\n    {\n        Node *add;\n        add=new Node(data);\n        add->setnext(head);\n        head=add;\n    }\n\n    void AE(int data)\n    {\n        Node *add;\n        add=new Node(data);\n        Node *temp;\n        temp=head;\n        if(head==NULL)\n        head=add;\n        else\n        {\n            while(temp->getnext()!=NULL)\n            {\n                temp=temp->getnext();\n            }\n            temp->setnext(add);\n        }\n    }\n\n    void AMA(int after, int data)\n    {\n        Node *add;\n        add=new Node(data);\n        Node *temp=head;\n        while(temp!=NULL)\n        {\n            if(temp->getdata()==after)\n            {\n                add->setnext(temp->getnext());\n                temp->setnext(add);\n                break;\n            }\n            temp=temp->getnext();\n        }\n    }\n\n    void AMB(int before, int data)\n    {\n        Node *add;\n        add=new Node(data);\n        Node *temp=head;\n        Node *temp1=head;\n        while(temp!=NULL)\n        {\n            if(temp->getdata()==before)\n            {\n                if(head->getdata()==before)\n                {\n                    add->setnext(temp);\n                    head=add;\n                }\n                else\n                {\n                    add->setnext(temp);\n                    temp1->setnext(add);\n                    break;\n                }\n            }\n            temp1=temp;\n            temp=temp->getnext();\n        }\n    }\n\n    void DN(int data)\n    {\n        Node *temp=head;\n        Node *temp1=head;\n        while(temp!=NULL)\n        {\n            if(temp->getdata()==data)\n            {\n                if(temp==head)\n                {\n                    head=temp;\n                    delete [] temp;\n                }\n                else\n                {\n                    temp1->setnext(temp->getnext());\n                    delete [] temp;\n                    break;\n                }\n            }\n            temp1=temp;\n            temp=temp->getnext();\n        }\n    }\n    /*\n    void DNA(int data)\n    {\n        Node *temp=head;\n        Node *temp1=temp->getnext();\n        while(temp1->getnext()!=NULL)\n        {\n            if(temp1->getdata()==data)\n            {\n                break;\n            }\n            if(temp->getdata()==data && temp==head)\n            {\n                temp->setnext(temp->getnext()->getnext());\n                break;\n            }\n            if(temp->getdata()==data)\n            {\n                temp->setnext(temp1->getnext());\n                break;\n            }\n            temp=temp->getnext();\n            temp1=temp->getnext();\n        }\n    }\n    */\n    void DNA(int data)\n    {\n        Node *temp=head;\n        Node *temp1=head;\n        while(temp->getnext()!=NULL)\n        {\n            if((temp1->getnext()==NULL) && (temp1->getdata()==data))\n            {\n                break;\n            }\n            if(temp->getdata()==data && temp==head)\n            {\n                temp->setnext(temp->getnext()->getnext());\n                break;\n            }\n            if(temp->getdata()==data)\n            {\n                temp->setnext(temp1->getnext());\n                break;\n            }\n            temp=temp->getnext();\n            temp1=temp->getnext();\n        }\n    }\n    /*\n    void DNB(int data)\n    {\n        Node *temp=head->getnext();\n        Node *temp1=temp;\n        Node *temp2=head;\n        while(temp!=NULL)\n        {\n            if(temp->getdata()==data)\n            {\n                if(temp1==head)\n                {\n                    head=temp;\n                    temp1->setnext(NULL);\n                    delete [] temp1;\n                }\n                else\n                {\n                    temp2->setnext(temp);\n                    delete [] temp1;\n                    break;\n                }\n            }\n            temp2=temp1;\n            temp1=temp;\n            temp=temp->getnext();\n        }\n    }\n    */\n    void DNB(int data)\n    {\n        Node *temp=head;\n        Node *temp1=head;\n        Node *temp2=head;\n        while(temp!=NULL)\n        {\n            if(temp->getdata()==data)\n            {\n                if(temp==head)\n                {\n                    break;\n                }\n                if(temp1==head)\n                {\n                    head=temp;\n                    //temp1->setnext(NULL);\n                    delete [] temp1;\n                }\n                else\n                {\n                    temp2->setnext(temp);\n                    delete [] temp1;\n                    break;\n                }\n            }\n            temp2=temp1;\n            temp1=temp;\n            temp=temp->getnext();\n        }\n    }\n\n    void PR()\n    {\n        Node *temp;\n        temp=head;\n        while(temp!=NULL)\n        {\n            cout<<temp->getdata();\n            if(temp->getnext()!=NULL)\n            cout<<\" \";\n            temp=temp->getnext();\n        }\n        cout<<endl;\n    }\n\n    void FPR()\n    {\n\n        Node *temp;\n        temp=head;\n        while(temp!=NULL)\n        {\n            cout<<temp->getdata();\n            if(temp->getnext()!=NULL)\n            cout<<\"->\";\n            temp=temp->getnext();\n        }\n        cout<<endl;\n    }\n\n    void RPR()\n    {\n        Node *temp;\n        //temp=head;\n        //int *store;\n        int count=0;\n\n        for(temp=head;temp!=NULL;temp=temp->getnext())\n        count++;\n\n        /*while(temp!=NULL)\n        {\n            count++;\n            temp=temp->getnext();\n        }\n        */\n        temp=head;\n        int store[count];\n        //store=new int[count];\n        for(int i=0;i<count;i++)\n        {\n            store[i]=temp->getdata();\n            temp=temp->getnext();\n        }\n        for(int i=count-1;i>=0;i--)\n        {\n            cout<<store[i];\n            if(i>0)\n                cout<<\" \";\n        }\n        cout<<endl;\n    }\n\n    ~List()\n    {\n        while(head!=NULL)\n        {\n            Node *temp;\n            temp=head;\n            head=head->getnext();\n            delete [] temp;\n        }\n    }\n};\n\nint main()\n{\n    List obj;\n    string str;\n    int d;\n    do\n    {\n        cin>>str;\n        if(str==\"AB\")\n        {\n            cin>>d;\n            obj.AB(d);\n        }\n\n        if(str==\"AE\")\n        {\n            cin>>d;\n            obj.AE(d);\n        }\n\n        if(str==\"AMA\")\n        {\n            int after;\n            cin>>after>>d;\n            obj.AMA(after,d);\n        }\n\n        if(str==\"AMB\")\n        {\n            int before;\n            cin>>before>>d;\n            obj.AMB(before,d);\n        }\n\n        if(str==\"DN\")\n        {\n            cin>>d;\n            obj.DN(d);\n        }\n\n        if(str==\"DNA\")\n        {\n            cin>>d;\n            obj.DNA(d);\n        }\n\n        if(str==\"DNB\")\n        {\n            cin>>d;\n            obj.DNB(d);\n        }\n\n        if(str==\"PR\")\n        {\n            obj.PR();\n        }\n\n        if(str==\"FPR\")\n        {\n            obj.FPR();\n        }\n\n        if(str==\"RPR\")\n        {\n            obj.RPR();\n        }\n\n    }while(str!=\"EXIT\");\n    return 0;\n}\n",
  "name": "200240320010_linklist.cpp"
 },
 {
  "code": "#include<iostream>\nusing namespace std;\nclass Node\n{\n    private:\n        int data;\n        Node *next;\n    public:\n        Node()\n        {\n            data=0;\n            next=NULL;\n        }\n        Node(int data)\n        {\n            this->data=data;\n            next=NULL;\n        }\n        int getdata()\n        {\n            return data;\n        }\n        Node *getnext()\n        {\n            return next;\n        }\n        void setnext(Node *next)\n        {\n            this->next=next;\n        }\n};\nclass LinkList\n{\n    private:\n        Node *head;\n    public:\n    LinkList()\n    {\n        head=NULL;\n    }\n    void insertbeg(int data)\n    {\n        Node *node=new Node(data);\n        if(head==NULL)\n        {\n            head=node;\n        }\n        else\n        {\n            node->setnext(head);\n            head=node;\n        }\n    }\n    void insertend(int data)\n    {\n        Node *node=new Node(data);\n        if(head==NULL)\n        {\n            head=node;\n        }\n        else\n        {\n            Node *temp=head;\n            while(temp->getnext()!=NULL)\n            {\n                temp=temp->getnext();\n            }\n                temp->setnext(node);\n        }\n    }\n    void insertafter(int tobe,int after)\n    {\n        Node *node=new Node(after);\n        Node *temp=head;\n        while(temp!=NULL && temp->getdata()!=tobe)\n        {\n            temp=temp->getnext();\n        }\n        if(temp==NULL)\n        {\n            cout<<\"Data Not found\" <<endl;\n        }\n        else\n        {\n            node->setnext(temp->getnext());\n            temp->setnext(node);\n        }\n    }\n    int insertbefore(int tobe,int before)\n    {\n        Node *node=new Node(before);\n        Node *temp=head;\n        Node *prev=head;\n        while(temp->getdata()!=tobe)\n        {\n            prev=temp;\n            temp=temp->getnext();\n        }\n        if(temp==NULL)\n        {\n            return 0;\n        }\n        if(head->getdata()==tobe)\n        {\n            node->setnext(head);\n            head=node;\n        }\n        else\n        {\n            node->setnext(prev->getnext());\n            prev->setnext(node);\n        }\n    }\n    void deletenode(int data)\n    {\n        Node *temp=head;\n        Node *prev=head;\n        while(temp->getnext()!=NULL && temp->getdata()!=data)\n        {\n            prev=temp;\n            temp=temp->getnext();\n        }\n            prev->setnext(temp->getnext());\n            delete temp;\n    }\n\n    void deleteafter(int after)\n    {\n        Node *temp=head;\n        Node *next=head;\n        while(temp->getnext()!=NULL && temp->getdata()!=after)\n        {\n            temp=temp->getnext();\n            next=temp->getnext();\n        }\n        while(1)\n        {\n            if(temp->getnext()==NULL)\n            {\n                break;\n            }\n            else if(next->getnext()==NULL)\n            {\n                temp->setnext(NULL);\n                delete next;\n            }\n            else if(temp->getdata()==after)\n            {\n                next=temp->getnext();\n                Node *temp1=next->getnext();\n                temp->setnext(temp1);\n                delete next;\n            }\n            break;\n        }\n    }\n    int deletebefore(int before)\n    {\n        Node *temp=head;\n        Node *prev;\n        if(temp->getdata()==before && temp!=NULL)\n        {\n            return 0;\n        }\n        while(temp->getnext()->getdata()!=before)\n        {\n            prev=temp;\n            temp=temp->getnext();\n        }\n        if(temp==head)\n        {\n            head=temp->getnext();\n            delete temp;\n        }\n        else\n        {\n            prev->setnext(temp->getnext());\n            delete temp;\n        }\n    }\n    void fancyprint()\n    {\n        Node *temp=head;\n        while(temp!=NULL)\n        {\n            cout<<temp->getdata() <<\"->\";\n            temp=temp->getnext();\n            if(temp->getnext()==NULL)\n            {\n            cout<<temp->getdata();\n            break;\n            }\n        }\n        cout<<endl;\n    }\n    void reverseprint()\n    {\n        Node *temp=head;\n        Node *temp2=head;\n        int count=1;\n        while(temp->getnext()!=NULL)\n        {\n            temp=temp->getnext();\n            count=count+1;\n        }\n        int *store;\n        store=new int[count];\n        for(int i=1;i<=count;i++)\n        {\n            store[i]=temp2->getdata();\n            temp2=temp2->getnext();\n        }\n        for(int j=count;j>=1;j--)\n        {\n            cout<<store[j]<<\" \";\n        }\n            cout<<endl;\n    }\n\n    void print()\n    {\n        Node *temp=head;\n        while(temp!=NULL)\n        {\n            cout<<temp->getdata() <<\" \";\n            temp=temp->getnext();\n        }\n        cout<<endl;\n    }\n    ~LinkList()\n    {\n        while(head!=NULL)\n        {\n            Node *temp=head;\n            head=head->getnext();\n            delete temp;\n        }\n    }\n};\n    int main()\n    {\n        LinkList l;\n        string cmd;\n        while(1)\n        {\n            cin>>cmd;\n            if(cmd==\"EXIT\")\n            {\n                break;\n            }\n            else if(cmd==\"AB\")\n            {\n                int data;\n                cin>>data;\n                l.insertbeg(data);\n            }\n            else if(cmd==\"AE\")\n            {\n                int data;\n                cin>>data;\n                l.insertend(data);\n            }\n            else if(cmd==\"AMA\")\n            {\n                int tobe;\n                int after;\n                cin>>tobe;\n                cin>>after;\n                l.insertafter(tobe,after);\n            }\n            else if(cmd==\"AMB\")\n            {\n                int tobe;\n                int before;\n                cin>>tobe;\n                cin>>before;\n                l.insertbefore(tobe,before);\n            }\n            else if(cmd==\"DN\")\n            {\n                int data;\n                cin>>data;\n                l.deletenode(data);\n            }\n            else if(cmd==\"DNA\")\n            {\n                int data;\n                cin>>data;\n                l.deleteafter(data);\n            }\n            else if(cmd==\"DNB\")\n            {\n                int data;\n                cin>>data;\n                l.deletebefore(data);\n            }\n            else if(cmd==\"FPR\")\n            {\n                l.fancyprint();\n            }\n            else if(cmd==\"RPR\")\n            {\n                l.reverseprint();\n            }\n            else if(cmd==\"PR\")\n            {\n                l.print();\n            }\n        }\n        return 0;\n    }\n",
  "name": "200240320012_linklist.cpp"
 },
 {
  "code": "#include<iostream>\n\nusing namespace std;\n\nclass Node\n{\n    private:\n            int data;\n            Node* next;\n    public:\n            Node()\n            {\n                next = NULL;\n                //data = 0;\n            }\n        \n            Node(int data)\n            {\n                this->data=data;\n                this->next=NULL;\n            }\n    \n            int getData()\n            {\n                return data;\n            }\n\n            Node* getNext()\n            {\n                return next;\n            }\n            void setNext(Node* next)\n            {\n                this->next=next;\n            }\n\n};\n\nclass LinkList\n{\n\nprivate:\n        Node *head;\n\npublic:\n        LinkList()\n        {\n            head = NULL;\n        }\n      \n                void AE(int data)\n                {   \n                    Node *node = new Node(data);\n                    if(head == NULL)\n                    {\n                        head = node;\n                    }\n\n                    else\n                    {\n                        Node *temp = head;\n                        while(temp->getNext() != NULL)\n                        {\n                            temp = temp->getNext();\n                        }\n                             temp->setNext(node);    \n                    }    \n                }\n\n\n                void AB(int data)\n                {\n                    Node *node = new Node(data);\n                    if(head == NULL)\n                    {\n                        head = node;\n                    }\n                    else\n                    {\n                        node->setNext(head);\n                        head = node;\n                    }\n                }\n            \n               \n                int AMA(int after , int d)\n                {\n                    Node *node = new Node(d);\n                    Node *temp = head;\n        \n                    while(temp != NULL && temp->getData() != after)\n                    {\n                        temp = temp->getNext();\n                    \n                     if(temp == NULL)\n                    {\n                        return 0;\n                    }\n                    }\n                    if(head->getData()==after)\n                    {\n                        node->setNext(head->getNext());\n                        head->setNext(node);\n                    }\n                    else\n                    {\n                        node->setNext(temp->getNext());\n                        temp->setNext(node);\n        \n                    }\n            }\n                \n                \n                 int AMB(int before , int d)\n                {\n                    Node *node = new Node(d);\n                    Node *temp = head;\n                    Node *prev = head;\n                    while(temp->getData() != before)\n                    {\n                        prev=temp;\n                        temp = temp->getNext();\n                    }\n                    if(temp == NULL)\n                    {\n                        return 0;\n                    }\n                     if(head->getData()==before)\n                     {\n                           node->setNext(head);\n                           head=node;\n                     }\n                     else\n                     {\n                         node->setNext(prev->getNext());\n                         prev->setNext(node);\n                     }   \n        \n                }\n                \n                \n                \n                \n                \n                void DN(int data)\n                {\n                    Node *temp = head;\n                    Node *prev = head;\n                   // temp = head;\n                    while(temp != NULL && temp->getData() != data)\n                    {\n                       // prev = temp;\n                        temp = temp->getNext();\n                    }\n                    //temp = prev->getNext();\n                    while(prev->getNext() != temp)\n                    {\n                        prev=prev->getNext();\n                    }\n                    prev->setNext(temp->getNext());\n                }\n                   \n                \n                 void *DNA( int after)\n                {\n                    Node *temp = head;\n                    Node *prev = head;\n                        \n                    while(temp->getNext() != NULL)\n                    {\n                        if(temp->getData()==after)\n                    {\n                        temp->setNext(temp->getNext()->getNext());\n                        break;\n                    }\n                    else\n                    {\n                        temp = temp->getNext();\n                    }\n                    }\n                }\n                  \n                \n                    int *DNB(int before)\n                    {\n                        Node *temp = head;\n                        Node *prev=NULL;\n                        if(head->getData() == before)\n                        {\n                            return 0;\n                        }\n                        \n                         \n                       while(temp->getNext()->getData() != before)  \n                         {\n                            prev = temp;\n                            temp = temp->getNext();\n                                                            \n                         }\n                         if(temp == head)\n                         {\n                             head= temp->getNext();\n                             delete temp;\n                         }\n                        else\n                        {\n                            prev->setNext(temp->getNext());\n                            delete temp;\n                        }\n                        \n                    }\n                    \n                    \n                    void FPR()\n                     {\n                         Node *temp = head;\n                         while(temp->getNext() != NULL)\n                     {\n                        cout<<temp->getData()<<\"->\";\n                        temp=temp->getNext();\n                     }\n                        cout<<temp->getData();\n                        cout<<endl;\n                     }\n                \n                \n               \n                void PR()\n                {\n                    Node *temp = head;\n                    while(temp != NULL)\n                {\n                        cout<<temp->getData()<<\" \";\n                        temp=temp->getNext();\n                }\n                    cout<<endl;\n\n                }\n                \n                void RPR(LinkList m)\n                {\n                \n                    Node *temp;\n                    temp = head;\n                    int top = 0;\n                    int *store;\n                    int count=0;\n                \n                while(temp!=NULL)\n                {\n                    count++;\n                    temp=temp->getNext();\n                }\n                     temp=head;\n                     store=new int[count];\n                     for(int i=0;i<count;i++)\n                    {\n                        store[i]=temp->getData();\n                        temp=temp->getNext();\n                    }\n                \n                        for(int i=count-1;i>=0;i--)\n                        {\n                            cout<<store[i];\n                            if(i>0)\n                            cout<<\" \";\n                        }\n                        cout<<endl;\n                 }\n};\n                             int main()\n                            {\n                            string cmd;\n                            LinkList l,m;\n                            while(1)\n                            {\n                                cin>>cmd;\n                            if(cmd == \"EXIT\")\n                            {\n                                break;\n                            }\n                            if(cmd == \"AB\")\n                            {\n                                int data;\n                                cin>>data;\n                                l.AB(data);\n                                \n                            }\n                                                \n                            if(cmd == \"AE\")\n                            {\n                                int data;\n                                cin>>data;\n                                 l.AE(data);\n                        \n                            }   \n                            if(cmd==\"AMA\")\n                            {\n                                int data,x;\n                                cin>>data;\n                                cin>>x;\n                                 l.AMA(data,x);\n                            }\n                            \n                             if(cmd==\"AMB\")\n                            {\n                                int data,x;\n                                cin>>data;\n                                cin>>x;\n                                 l.AMB(data,x);\n                            }\n                            \n                            \n                             if(cmd==\"DN\")\n                            {\n                                int data;\n                                cin>>data;\n                                \n                                 l.DN(data);\n                            }\n                            \n                             if(cmd==\"DNA\")\n                            {\n                                int data;\n                                cin>>data;\n                                \n                                 l.DNA(data);\n                            }\n                        \n                              if(cmd==\"DNB\")\n                            {\n                                int data;\n                                cin>>data;\n                                \n                                l.DNB(data);\n                            }\n                            \n                            if(cmd == \"FPR\")\n                            {\n                                int data;\n                                \n                                l.FPR();\n                             \n                            }\n                        \n                             if(cmd == \"PR\")\n                            {\n                                l.PR();\n                        \n                            }  \n                            \n                            if(cmd == \"RPR\")\n                            {\n                                \n                                l.RPR(m);\n                        \n                            }\n                            \n            \n \n                       } \n                        \n                       \n return 0;\n                        \n                \n\n\n}",
  "name": "200240320025_linklist.cpp"
 },
 {
  "code": "#include<iostream>\n#include<cstring>\n\nusing namespace std;\n\nclass Node\n{\n    private:\n        int data;\n        Node *next;\n        \n    public:\n        Node()\n          {\n              next = NULL;\n          }\n          \n        Node(int data)\n          {\n              this->data = data;\n              this->next = NULL;\n          }\n          \n        ~Node()\n          {\n              next = NULL;\n          }\n          \n         Node* getNext()\n          {\n              return next;\n          }\n          \n         void setNext( Node *next)\n          {\n              this->next = next;   \n          }\n          \n         int getData()\n          {\n              return data;\n          }\n};\n\nclass LinkList\n{\n    private:\n        Node *head;\n        \n    public:\n        LinkList()\n           {\n              head = NULL;\n           }\n    \n    \n        ~LinkList()\n           {\n              while(head != NULL)\n                  {\n                      Node *temp = head;\n                      head = head->getNext();\n                      delete temp;\n                  }\n           }\n           \n        Node* getHead()\n          {\n              return head;\n          }\n         \n         \n        void insertBegin(int data)\n        \n           {\n                   Node *node = new Node(data);\n                   if(head == NULL)\n                       {\n                           head = node;\n                       }\n                   else\n                       {\n                           \n                           node->setNext(head);\n                           head = node;\n                           \n                       }\n           }\n          \n          \n       void insertEnd(int data)\n        \n           {\n                  Node *node = new Node(data);\n                  if(head == NULL)\n                       {\n                           head = node;\n                       }\n                  else\n                       {\n                           Node *temp=head;\n                           while( temp->getNext() != NULL)\n                                {\n                                    temp = temp->getNext();\n                                }\n                           temp->setNext(node);\n                       }\n           }\n           \n         \n        void insertAfter(int after, int data)\n           { \n                 Node *node = new Node(data);\n                 Node *temp = head;\n                 while( temp !=NULL && temp->getData()!= after)\n                       {\n                           temp = temp->getNext();\n                       }\n                 if(head == NULL)\n                       {\n                           return;\n                       }\n                 else if(temp == NULL)\n                       {\n                           //cout<<\"Data not found\";\n                       }\n                 else\n                       {\n                           node->setNext(temp->getNext());\n                           temp->setNext(node);\n                       }\n           }\n        \n           \n        void insertBefore(int before, int data)\n           {\n                /* Node *node = new Node(data);\n                 Node *temp = head;\n                 Node *pretemp = head;\n                 while( temp !=NULL && temp->getData()!= before)\n                       {\n                           pretemp = temp;\n                           temp= temp->getNext();\n                       }\n                 if(head==NULL)\n                       {\n                         return;\n                       }\n                       else if(temp == NULL)\n                       {\n                           //cout<<\"Data not found\";\n                       }\n                 else\n                       {\n                           node->setNext(temp);\n                           pretemp->setNext(node);\n                       } */\n                       \n                       \n                Node* node= new Node(data);\n                if(head == NULL)\n                  {\n                      \n                  }\n                else\n                  {\n                      Node* temp1;\n                      Node* temp2;\n                      temp1 = head;\n                      temp2 = head;\n                      while((temp1 != NULL) && (temp1->getData() != before))\n                      {\n                          temp2 = temp1;\n                          temp1 = temp1->getNext();\n                          \n                      }\n                     \n                     if(temp1 == head)\n                     {\n                         node->setNext(temp1);\n                         this->head = node;\n                     }\n                     else if(temp1 != NULL)\n                     {\n                         node->setNext(temp1);\n                         temp2->setNext(node);\n                     }\n                     else if(temp1 ==NULL)\n                     {\n                         \n                     }\n                      \n                  }\n           } \n         \n         \n        void deleteNode( int data)\n           {\n            /*   Node *temp, *pretemp, *postemp;\n                 temp = head;\n                 postemp = head;\n                 pretemp = head;\n                 if(head == NULL)\n                 {\n                     return;\n                 }\n                 \n                 else\n                   {\n                 while((temp != NULL) && (temp->getData()!=data))\n                    {\n                           postemp = temp;\n                           temp = pretemp;\n                           pretemp =  pretemp->getNext();\n                          \n                    }\n                \n                if( temp == NULL)\n                    {\n                        temp->setNext(NULL);\n                        postemp = NULL;\n                        temp = NULL;\n                    }\n                else if( temp != NULL)\n                    {\n                        postemp->setNext(pretemp);\n                        temp->setNext(NULL);\n                 }   }    */\n                 \n            Node* temp1;\n            Node* temp2;\n            temp1 = head;\n            temp2 = head;\n            while((temp1 != NULL) && (temp1->getData() != data))\n                      {\n                          temp2 = temp1;\n                          temp1 = temp1->getNext();\n                          \n                      }\n           if(temp1 == this->head)\n                     {\n                         this->head = temp1->getNext();\n                         temp1 = NULL;\n                         temp2 = NULL;\n                     }\n           else if(temp1 == NULL)\n                    {\n                        temp2 = NULL;\n                    }\n          else if(temp1 != NULL)\n                   {\n                       temp2->setNext(temp1->getNext());\n                       temp1->setNext(NULL);\n                   }\n           }\n          \n        void deleteBefore( int dBefore)\n           {\n               /*  Node *temp, *pretemp;\n                 temp = head;\n                 pretemp = head;\n                 if(head==NULL)\n                 {\n                     return;\n                 }\n                 else\n                 {\n                 if(head->getData()==dBefore)\n                 {\n                     return;\n                 }\n                 \n                  if(head->getNext()->getData()== dBefore)\n                 {\n                     head = head->getNext();\n                     \n                 }\n                 \n                 while(temp->getNext()->getData() !=dBefore)\n                    {   \n                       pretemp = temp;\n                        temp = temp->getNext();\n                    }\n                    if(head->getNext()->getData()==dBefore)\n                    {\n                        head=head->getNext();\n                    }\n              \n                 else   {  \n                      pretemp->setNext(temp->getNext());\n                 }\n                                         \n           }   */\n           \n           Node* temp1;\n           Node* temp2;\n           Node* temp3;\n           temp1 = head;\n           temp2 = head;\n           temp3 = head;\n         while((temp1 != NULL) && (temp1->getData() !=dBefore))\n         {\n               temp3 = temp2;\n               temp2 = temp1;\n               temp1 = temp1->getNext();\n         }\n         if(temp1 ==NULL)\n                 {\n                     temp3 = NULL;\n                     temp2 =NULL;\n                 }\n        else if(temp1 == head)\n                {\n                   temp3 = NULL;\n                     temp2 =NULL; \n                }\n        else if(temp2 == head && temp3 == head)\n                {\n                    this->head = temp1;\n                    temp2->setNext(NULL);\n                    temp3 = NULL;\n                    temp2 = NULL;\n                }\n        else if(temp1 != NULL)\n               {\n                   temp3->setNext(temp1);\n                   temp2->setNext(NULL);\n                   temp3 = NULL;\n                   temp2 = NULL;\n               }\n         }\n\n       void deleteAfter(int aDelete)\n           {\n               \n               Node* temp1;\n               Node* temp3;\n               temp1 = head;\n               temp3 = NULL;\n              while((temp1 != NULL) && (temp1->getData()!= aDelete))\n              {\n                  temp1 = temp1->getNext();\n              }\n\n               if(temp1== NULL)\n               {\n                   temp3 = NULL;\n               }\n               else if(temp1->getNext() == NULL)\n               {\n                   \n               }\n               else\n               {\n                   temp3 = temp1->getNext();\n                   temp1->setNext(temp3->getNext());\n                   temp3->setNext(NULL);\n                   temp3 = NULL;\n               }\n               \n             /*  Node* temp=head;\n               if(head == NULL)\n               {\n                   return;\n               }\n               else{\n               while(temp->getNext()!=NULL && temp->getData()!=aDelete)\n               {\n                   temp = temp->getNext();\n               }\n               if(temp == NULL)\n               {\n                   temp->setNext(NULL);\n               }\n               if(temp->getData()!= aDelete)\n                {\n                    return;\n                }\n                else\n                {\n                    temp->setNext(temp->getNext()->getNext());\n                }\n                */\n                \n                 /*Node *temp, *pretemp, *postemp;\n                 temp = head->getNext();\n                 postemp = temp->getNext();\n                 pretemp = head;\n                 \n                 if( pretemp->getData() != aDelete )\n                    {\n                        \n                       // cout<<\"direct return\"<<endl;\n                        return;\n                       \n                    }\n                 \n                 while((pretemp->getNext() != NULL) && (pretemp->getData()!=aDelete))\n                    {\n                         pretemp = temp;\n                         temp = temp->getNext();\n                       postemp =  temp->getNext();\n                    }\n                     if(pretemp == NULL)\n                     {\n                     return;\n                     }\n                else if( temp != NULL)\n                    {\n                        pretemp->setNext(postemp->getNext());\n                       \n                    }*/  \n         //  } \n           }\n           \n         void print()\n           {    \n               Node *temp;\n               temp=head;\n                while(temp!=NULL)\n                    {\n                        cout<<temp->getData()<<\" \";\n                        temp = temp->getNext();\n                        \n                    }\n                    \n                    cout<<endl;\n           }\n           \n         void fancyPrint()\n           {\n               Node *temp;\n               temp=head;\n               //cout<<\"hello\";\n                while(temp!=NULL)\n                    {   \n                        if(temp->getNext()!=NULL)\n                        {\n                        cout<<temp->getData()<<\"->\";\n                        temp = temp->getNext();\n                        }\n                        else if(temp->getNext() == NULL)\n                        {\n                            cout<<temp->getData()<<endl;\n                            temp = temp->getNext();\n                        }\n                    }\n                    \n                  //  cout<<endl;\n           }\n          \n          void reverse()\n          {\n              Node* temp = head;\n              if(head == NULL)\n              {\n                  \n              }\n              else\n              {\n              rev(temp);\n              cout<<endl;\n              }\n          }\n         void rev( Node* temp)\n           {     \n               if(head == NULL)\n               {\n                   \n               }\n               else if(temp->getNext()!= NULL)\n                 {\n                     rev(temp->getNext());\n                 }\n                 cout<<temp->getData()<<\" \";\n                  \n           }\n};\n\nint main()\n{\n    LinkList l;\n    while(1)\n        {\n            string exp;\n            cin>>exp;\n            if(exp == \"EXIT\")\n                 {\n                     break;\n                 }\n            else if(exp == \"AB\")\n                 {      \n                     int data;\n                     cin>>data;\n                     l.insertBegin(data);\n                 }\n            else if(exp ==\"PR\")\n                {\n                    l.print();\n                }\n            else if(exp == \"AE\")\n                {\n                    int data;\n                    cin>>data;\n                    l.insertEnd(data);\n                }\n            else if(exp == \"AMA\")\n               {\n                   int data;\n                   int after;\n                   cin>>after>>data;\n                   l.insertAfter(after , data);\n               }\n            else if(exp == \"AMB\")\n              {\n                  int data;\n                  int before;\n                  cin>>before>>data;\n                  l.insertBefore(before, data);\n              }\n            else if(exp == \"DN\")\n              {\n                  int data;\n                  cin>>data;\n                  l.deleteNode(data);\n              }\n            else if(exp == \"DNA\")\n              {\n                  int data;\n                  cin>>data;\n                  l.deleteAfter(data);\n              }\n            else if(exp == \"DNB\")\n              {\n                  int data;\n                  cin>>data;\n                  l.deleteBefore(data);\n              }\n            else if(exp == \"FPR\")\n              {\n                  l.fancyPrint();\n              }\n            else if(exp == \"RPR\")\n              {\n                  l.reverse();\n              }\n            \n        }\n    \n    \nreturn 0;\n}",
  "name": "200240320031_linklist.cpp"
 },
 {
  "code": "#include<iostream>\n#include<cstring>\n#include<stdlib.h>\nusing namespace std;\n\nclass Node\n{\n    private:\n        int data;\n        Node *next;\n        \n    public:\n        Node()\n        {\n            next=NULL;\n        }\n        \n        /*~Node()\n        {\n            next=NULL;\n        }*/\n        \n        Node(int data)\n        {\n            this->data=data;\n            this->next=NULL;\n        }\n        \n        int getdata()\n        {\n            return data;\n        }\n        \n        Node* getnext()\n        {\n            return next;\n        }\n        \n        void setnext(Node* next)\n        {\n            this->next=next;\n        }\n\n};\n\nclass Linklist\n{\n    private:\n        Node* head;\n        \n    public:\n        Linklist()\n        {\n            head=NULL;\n        }\n        \n        void insertbegin(int data)\n        {\n            Node* node=new Node(data);\n            if(head==NULL){\n                head=node;\n                }\n            else{\n                node->setnext(head);\n                head=node;\n                }\n        }\n        \n        void print()\n        {\n            Node*temp=head;\n            while(temp!=NULL)\n            {\n                cout<<temp->getdata()<<\" \";\n                temp=temp->getnext();\n            }\n            cout<<endl;\n        }\n        \n        void insertend(int data)\n        {\n            Node* node=new Node(data);\n            if(head==NULL){\n                head=node;\n            }\n            else{\n                Node* temp=head;\n                while(temp->getnext()!=NULL)\n                {\n                    temp=temp->getnext();\n                }\n                    temp->setnext(node);\n            }\n        }\n        \n        void insertafter(int after,int data)\n        {\n            Node* node=new Node(data);\n            Node* temp=head;\n            while(temp!=NULL && temp->getdata()!=after)\n            {\n                temp=temp->getnext();\n                if(temp==NULL){\n                    cout<<\"data not found\"<<endl;\n                }\n            }\n            if(head->getdata()==after)\n            {\n                node->setnext(head->getnext());\n                head->setnext(node);\n            }\n            else{\n                node->setnext(temp->getnext());\n                temp->setnext(node);\n            }\n        }\n        \n        int insertbefore(int before, int data)\n        {\n            Node*node=new Node(data);\n            Node* prev;\n            Node* temp=head;\n            while(temp->getdata() != before)\n            {\n                prev=temp;\n                temp=temp->getnext();\n                if(temp==NULL)\n                {\n                    return 0;\n                }\n            }\n            if(head->getdata()==before)\n            {\n                node->setnext(head);\n                head=node;\n            }\n            else\n            {\n                node->setnext(prev->getnext());\n                prev->setnext(node);\n            }\n        }\n        \n        /*void delfirst(int data)\n        {\n            Node* temp=head;\n            \n            if(head!=NULL){\n             temp=head;\n             head=temp->getnext();\n             delete temp;\n            }\n            else{\n                cout<<endl;\n            }    \n        }*/\n\n        int dR(int data)\n        {\n            Node* temp;\n            Node* prev;\n            prev=temp=head;\n            while(temp->getdata()!=data)\n            {\n                prev=temp;\n                temp=temp->getnext();\n                if(temp==NULL)\n                {\n                    return 0;\n                }\n            }\n            if(data==head->getdata())\n            {\n                head=head->getnext();\n                delete temp;\n            }\n            else\n            {\n                prev->setnext(temp->getnext());\n                delete temp;\n            }\n        }\n\n        int delbefore(int data)\n        {\n            Node* temp;\n            Node* prev;\n            temp=prev=head;\n            if(head->getdata()==data)\n            {\n                return 0;\n            }\n            if(head->getnext()->getdata()==data)\n            {\n                head=head->getnext();\n            }\n            else\n            {\n                while(temp->getnext()->getdata()!=data)\n                {\n                    prev=temp;\n                    temp=temp->getnext();\n                }\n                prev->setnext(temp->getnext());\n                delete temp;\n            }\n        }\n        \n        int delafter(int data)\n        {\n            Node* temp;\n            Node* prev;\n            temp=prev=head;\n            while(temp->getdata() != data)\n            {\n                prev=temp;\n                temp=temp->getnext();\n                if(temp==NULL)\n                {\n                    return 0;\n                }\n            }\n            prev=temp;\n            temp=temp->getnext();\n            if(temp!=NULL)\n            {\n                prev->setnext(temp->getnext());\n            }\n            delete temp;\n        }\n        \n        void print_fancy()\n        {\n            Node*temp=head;\n           while(temp->getnext()!=NULL)\n            {\n                cout<<temp->getdata()<<\"->\";\n                temp=temp->getnext();\n            }\n            cout<<temp->getdata()<<endl; \n        }\n        \n        void RV()\n        {\n            Node* temp;\n            temp=head;\n            R(temp);\n            cout<<endl;\n        }\n        \n        void R(Node* temp)\n        {\n            if(temp->getnext()!=NULL)\n            {\n                R(temp->getnext());\n            }\n            cout<<temp->getdata()<<\" \";\n        }\n};\n\nint main()\n{\n    Linklist ll;\n    int data;\n    int position;\n    string cmd;\n   \n   while(1)\n   { \n       cin>>cmd;\n        \n        if(cmd==\"AB\")\n        {\n            cin>>data;\n           ll.insertbegin(data);\n           \n        }\n        \n        if(cmd==\"PR\")\n        {\n            ll.print();\n        }\n        \n        if(cmd==\"AE\")\n        {\n            cin>>data;\n            ll.insertend(data);    \n        }\n        \n        if(cmd==\"AMA\")\n        {\n            cin>>position;\n            cin>>data;\n            ll.insertafter(position,data);    \n        }\n        \n        if(cmd==\"AMB\")\n        {\n            cin>>position;\n            cin>>data;\n            ll.insertbefore(position,data);\n        }\n\n        if(cmd==\"DN\")\n        {\n            cin>>position;\n            //ll.delfirst(N);\n            ll.dR(position);\n        }\n        \n        if(cmd==\"DNA\")\n        {\n            cin>>position;\n            ll.delafter(position);\n        }\n        \n        if(cmd==\"DNB\")\n        {\n            cin>>position;\n            ll.delbefore(position);\n            //ll.print();\n        }\n        \n        \n        if(cmd==\"FPR\")\n        {\n            ll.print_fancy();\n        }\n        \n        if(cmd==\"RPR\")\n        {\n            ll.RV();\n            //ll.print_fancy();\n        }\n        \n        if(cmd==\"EXIT\")\n        {\n            exit (0);\n        }\n   }\n   return 0;\n}",
  "name": "200240320042_linklist.cpp"
 },
 {
  "code": "#include<iostream>\nusing namespace std;\n\nclass Node\n{\n    private:\n        int age;\n        string name;\n        Node *next;\n        friend class linklist;\n};\nclass linklist\n{\n    private:\n        Node *head;\n    public:\n        linklist()\n        {\n            head=NULL;\n        }\n        void addNode(string nam,int data)\n        {\n            Node *temp,*temp1;\n            temp1=head;\n            temp=head;\n            Node *newnode=new Node;\n            newnode->age=data;\n            newnode->name=nam;\n            newnode->next=NULL;\n\n            if(head==NULL)\n\n                head=newnode;\n\n            else\n            {\n\n                while((temp->next != NULL)&&(temp->age <= data))\n                {\n                    temp1=temp;\n                    temp=temp->next;\n                }\n                if(temp==head)\n                {\n                    if(temp->age <= data)\n                    {\n                        temp1->next=newnode;\n                        newnode->next=NULL;\n                    }\n                    else\n                    {\n                       newnode->next=head;\n                       head=newnode;\n                    }\n                }\n\n                else if(temp->next == NULL)\n                {\n                    if(temp->age <= data)\n                    {\n                        temp->next=newnode;\n                        newnode->next=NULL;\n                    }\n                    else\n                    {\n                        newnode->next=temp;\n                        temp1->next=newnode;\n                    }\n                }\n                else if(temp->next != NULL)\n                {\n                    newnode->next=temp;\n                    temp1->next=newnode;\n                }\n             }\n        }\n\n        void deleteNode(int data)\n        {\n            int i=1;\n            Node *temp,*temp1,*temp2;\n            temp1 = temp = head;\n            if(data == 1)\n            {\n                head=head->next;\n                temp=NULL;\n                temp1=NULL;\n            }\n            else\n            {\n                while(i < data-1)\n                {\n                    temp=temp->next;\n                    i++;\n                }\n                temp1=temp->next;\n                temp->next=temp1->next;\n                temp1->next=NULL;\n                temp1=NULL;\n            }\n        }\n        void printLL(int manip)\n        {\n            int i = 1;\n            Node *temp;\n            temp=head;\n            while(i<manip)\n            {\n                i++;\n                temp = temp->next;\n            }\n            cout<<temp->name<<\" \"<<temp->age<<endl;\n        }\n};\nint main()\n{\n    linklist m;\n    while(1)\n    {\n        string input;\n        cin>>input;\n        if(input == \"insert\")\n            {\n                int data;\n                string name;\n                cin>>name;\n                cin>>data;\n                m.addNode(name,data);\n            }\n            if(input ==\"remove\")\n            {\n                int data;\n                cin>>data;\n                m.deleteNode(data);\n            }\n            if(input ==\"print\")\n            {\n                int manip;\n                cin>>manip;\n                m.printLL(manip);\n            }\n            if(input ==\"stop\")\n            {\n                break;\n            }\n    }\n return 0;\n}\n",
  "name": "200240320046_linklist.cpp"
 },
 {
  "code": "#include<iostream>\n#include<cstring>\n#include<stdlib.h>\nusing namespace std;\nclass Node\n{\n        private:\n                int data;\n                Node *next;\n        public:\n                \n                Node(int data)\n                {\n                    this->data=data;\n                    next=NULL;\n                }\n                Node* getNext()\n                {\n                    return next;\n                }\n                void setNext(Node *next)\n                {\n                    this->next=next;\n                }\n                int getData()\n                {\n                    return data;\n                }\n};\n\nclass LinkList\n{\n        private:\n                Node *head;\n        public:\n                LinkList()\n                {\n                    head=NULL;\n                }\n                void AB(int data)\n                {\n                    Node *node=new Node(data);\n                        if(head==NULL)\n                        {\n                            head=node;\n                        }                    \n                    else\n                    {\n                        node->setNext(head);\n                        head=node;\n                    }\n                }\n                void AE(int data)\n                {\n                    Node *node=new Node(data);\n                    \n                    if(head==NULL)\n                    head=node;\n                    else\n                    {\n                        Node *temp;\n                        temp=head;\n                        while(temp->getNext()!=NULL)\n                        {\n                            temp=temp->getNext();\n                        }\n                        temp->setNext(node);\n                    }\n                }\n                void AMA(int after,int data)\n                {\n                    Node *node=new Node(data);\n                        Node *temp;\n                        temp=head;\n                    if(head==NULL)\n                        head=node;\n                    else\n                    {\n                        while(temp->getNext()!=NULL && temp->getData()!=after)\n                        {\n                            temp=temp->getNext();\n                        }\n                        if(temp==NULL)\n                        {\n                          return;\n                        }\n                        else\n                        {\n                            node->setNext(temp->getNext());\n                            temp->setNext(node);\n                        }\n                    }\n                    \n                }\n                void AMB(int before,int data)\n                { \n                  Node *node=new Node(data);\n                        Node *temp;\n                        Node *prev;\n                        temp=head;\n                        prev=head;\n                    if(head==NULL)\n                        head=node;\n                    if(head->getData()==before)\n                    {\n                        node->setNext(head);\n                        head=node;\n                    }\n                    else\n                    {\n                        while(temp->getNext()!=NULL && temp->getData()!=before)\n                        {\n                            prev=temp;\n                            temp=temp->getNext();\n                        }\n                        if(temp==NULL)\n                        {\n                            return;\n                        }\n                        else\n                        {\n                            node->setNext(temp);\n                            prev->setNext(node);\n                        }\n                    }\n                }\n                void DN(int data)\n                {\n                    Node *temp=head;\n                    \n                    if(head->getData()==data)\n                    {\n                        head=head->getNext();\n                        \n                    }\n                    else\n                    {\n                        while(temp!=NULL && (temp->getNext())->getData()!=data)\n                        {\n                            temp=temp->getNext();\n                        }\n                        if(temp==NULL)\n                        {\n                            cout<<\"Data not found\";\n                        }\n                        else if(temp->getNext()==NULL)\n                        {\n                            delete temp;\n                        }\n                        else\n                        {\n                            temp->setNext((temp->getNext())->getNext());\n                        }\n                    }                \n                }\n                void DNA(int data)\n                {\n                    Node *temp;\n                    temp=head;\n                    while(temp!=NULL && temp->getData()!=data)\n                    {\n                        temp=temp->getNext();\n                    }\n                \n                    if(temp==NULL)\n                    {\n                        return;\n                    }\n                    else if(temp->getNext()==NULL)\n                    {\n                        return;                    \n                    }\n                    else\n                    {\n                        temp->setNext((temp->getNext())->getNext());\n                    }\n                }\n                \n                \n                void DNB(int data)\n                {\n                    Node *temp;\n                    Node *prev;\n                    temp=head;\n                    prev=head;\n                    if(head->getData()==data)\n                    {\n                        return;\n                    }\n                    else\n                    {\n                    while(temp!=NULL && (temp->getNext())->getData()!=data)\n                    {\n                        prev=temp;\n                        temp=temp->getNext();\n                    }\n                    if(temp==NULL)\n                    {\n                        return;\n                    }\n                    if(head->getNext()->getData()==data)\n                    {\n                        head=head->getNext();\n                    }\n                    else\n                    {\n                        prev->setNext(temp->getNext());\n                        delete temp;\n                    }\n                    }  \n            }\n                void FPR()\n                {\n                    Node *temp;\n                    temp=head;\n                    Node *prev;\n                    prev=head;\n                    while(temp->getNext()!=NULL)\n                    {\n                        prev=temp;\n                        cout<<prev->getData()<<\"->\";\n                        temp=temp->getNext();\n                    }\n                    cout<<temp->getData()<<endl;\n                }\n                \n                Node * getHead()\n                {\n                    return head;\n                }\n                void RPR(Node *rev)\n                {   \n                    if(rev==NULL)\n                    {\n                        return;\n                    }\n                    else\n                    {\n                        RPR(rev->getNext());\n                        cout<<rev->getData()<<\" \";\n                    }\n                    \n                    \n                }\n                void PR()\n                {\n                    Node *temp;\n                    temp=head;\n                    while(temp!= NULL)\n                    {\n                        cout<<temp->getData()<<\" \";\n                        temp=temp->getNext();\n                    }\n                    cout<<endl;\n                }\n};\n\nint main()\n{\n    LinkList l1;\n    string cmd;\n    \n    int data;\n    while(1)\n    {   \n        \n        cin>>cmd;\n        if(cmd==\"AB\")\n        {\n            cin>>data;\n            l1.AB(data);\n        }\n        if(cmd==\"PR\")\n        {\n            l1.PR();\n        }\n        if(cmd==\"AE\")\n        {\n            cin>>data;\n            l1.AE(data);\n        }\n        if(cmd==\"AMA\")\n        {\n          \n            int after;\n         \n            cin>>after;\n            cin>>data;\n            l1.AMA(after,data);\n        }\n        if(cmd==\"AMB\")\n        {\n            int before;\n            cin>>before;\n            cin>>data;\n            l1.AMB(before,data);\n        }\n        if(cmd==\"DN\")\n        {\n            \n            cin>>data;\n            l1.DN(data);\n        }    \n        if(cmd==\"DNA\")\n        {\n            \n            cin>>data;\n            l1.DNA(data);\n        }  \n         if(cmd==\"DNB\")\n        {\n            \n            cin>>data;\n            l1.DNB(data);\n        }    \n         if(cmd==\"FPR\")\n        {\n            l1.FPR();\n        }\n        if(cmd==\"RPR\")\n        {\n            l1.RPR(l1.getHead());\n            cout<<endl;\n        }\n        if(cmd == \"EXIT\")\n        {\n            break;\n        }\n        \n        \n    }\n    return 0;\n    \n}",
  "name": "200240320051_linklist.cpp"
 },
 {
  "code": "#include<iostream>\n#include<cstring>\n#include<stdlib.h>\nusing namespace std;\n    class node\n        {\n             private:\n                 int data;\n                 node *next;\n             public:\n                 node(int data)\n                    {\n                         this->data=data;\n                         next=NULL;\n                     }\n                     ~node()\n                     {}\n                 \n                 int getdata()\n                    {\n                        return data;\n                    }\n                 \n                 void setdata(int data)\n                    {\n                        this->data=data;\n                    }\n              \n                 void setnext(node *next)\n                    {\n                      this->next=next;\n                    }\n\n                 node *getnext()\n                    {\n                      return next; \n                    }\n        \n};\n\n      class linklist\n          {\n               private:\n                    node *head;\n               public:\n                    linklist()\n                       {\n                           head=NULL;\n                       }\n                       ~linklist()\n                       {}\n    \n                     void AB(int data)\n                       {\n                            node *n=new node(data);\n                            if(head==NULL)\n                                {\n                                  head=n;\n                                }\n                            else\n                                {\n                                   n->setnext(head);\n                                   head=n;\n                                 }\n                      }\n                      \n                      void AE(int data)\n                         {\n                              node *n=new node(data);\n                              node *temp=head;\n                              if(head==NULL)\n                                 {\n                                     head=n;\n                                 }\n                                 else\n                                 {\n                               while(temp->getnext()!=NULL)\n                                    {\n                                           temp=temp->getnext();\n                                    }\n                                    temp->setnext(n);\n                                    n->setnext(NULL);\n                                 }  \n                         }   \n\n                      int AMA(int after,int data)\n                         {\n                              node *n=new node(data);\n                              node *temp=head;\n                              while( temp->getdata()!=after)\n                                   {\n                                       temp=temp->getnext();\n                                       if(temp==NULL)\n                                         {\n                                           return 0;\n                                          }\n                                   } \n                                    if(head->getdata()==after)\n                                     {\n                                        n->setnext(temp->getnext());\n                                       temp->setnext(n);\n                                     }\n                                     else\n                                     {\n                                         n->setnext(temp->getnext());\n                                         temp->setnext(n);\n                                     }\n                         }\n                         \n                         int  AMB(int before, int tobe)\n                           {\n                               node *n=new node(tobe);\n                               node *temp=head;\n                               node *prev=temp;\n                               \n                               while(temp->getdata()!=before)\n                                   {\n                                       prev=temp;\n                                       temp=temp->getnext();\n                                      if(temp==NULL)\n                                        {\n                                            return 0;\n                                        }\n                                   }\n                                   if (head->getdata()==before)\n                                      {\n                                          n->setnext(head);\n                                          head=n;\n                                      }\n                                else\n                                   {\n                                       n->setnext(prev->getnext());\n                                       prev->setnext(n);\n                                   }\n                                      \n                           }\n                           \n                           int DN(int data)\n                               {\n                                   node *temp=head;\n                                   node *prev=temp;\n                                   while( temp->getdata()!=data)\n                                   {\n                                       prev=temp;\n                                       temp=temp->getnext();\n                                       if(temp==NULL)\n                                         {\n                                             return 0;\n                                         }\n                                   }\n                                   if(head->getdata()==data)\n                                      {\n                                          head=head->getnext();\n                                          delete temp;\n                                      }\n                                    else\n                                    {\n                                        prev->setnext(temp->getnext());\n                                        delete temp;\n                                        \n                                    }\n                                      \n                               }\n                               \n                            int DNA(int data)\n                                {\n                                    node *temp=head;\n                                    node *prev=head;\n                                    \n                                    while(temp->getdata()!=data)\n                                               {\n                                                   prev=temp;\n                                                   temp=temp->getnext();\n                                               \n                                                 if(temp==NULL)\n                                                      {\n                                                        return 0;\n                                                     }\n                                               }                                \n                                                   prev=temp;\n                                                   temp=temp->getnext();\n                                                   if(temp!=NULL)\n                                                    prev->setnext(temp->getnext());\n                                                    delete temp;\n                                       \n                                     \n                             }\n                             \n                             int DNB(int data)\n                                  {\n                                      node *temp=head;\n                                      node *prev=head;\n                                      if(head->getdata()==data)\n                                         {\n                                             return 0;\n                                         }\n                                         if(head->getnext()->getdata()==data)\n                                            {\n                                                head=head->getnext();\n                                            }\n                                        else\n                                        {    \n                                         while(  temp->getnext()->getdata()!=data)\n                                          {\n                                                prev=temp;\n                                                temp=temp->getnext();\n                                          }\n                                          prev->setnext(temp->getnext());\n                                          delete temp;\n                                         }\n                                  }\n                             \n                     void PR()\n                         {\n                             node *temp=head;\n                             while(temp!=NULL)\n                                  {\n                                     cout<<temp->getdata()<<\" \";\n                                     temp=temp->getnext();\n                                  }\n                                  cout<<endl;\n                          }\n                            \n                     void FPR()\n                          {\n                             node *temp=head;\n                             while(temp->getnext()!=NULL)\n                                  {\n                                     cout<<temp->getdata()<<\"->\";\n                                     temp=temp->getnext();\n                                  }\n                                  cout<<temp->getdata();\n                                  cout<<endl;\n                          }\n                          \n                        void reverse()\n                           {\n                               node *temp;\n                               temp=head;\n                               RPR(temp);\n                               cout<<endl;\n                               \n                           }\n                          \n                    void RPR(node *temp)\n                          {\n                              if(temp==NULL)\n                                 return ;\n                                 RPR(temp->getnext());\n                                 cout<<temp->getdata()<<\" \";\n                          }\n                          \n                          \n};\n\nint main()\n      {\n           int a,d;\n        linklist s1;\n         string cmd;\n          while(1)\n              {\n                 cin>>cmd;\n                   if(cmd==\"EXIT\")\n                      {\n                        exit(0);\n                       }\n                   if(cmd==\"AB\")\n                        {\n                           \n                             cin>>a;\n                            s1.AB(a);\n                        }\n                        \n                    if (cmd==\"AE\")\n                        {\n                             cin>>a;\n                             s1.AE(a);\n                        }\n                        \n                   if(cmd==\"AMA\")\n                       {\n                          //int d;\n                          cin>>a;\n                          cin>>d;\n                          s1.AMA(a,d);\n                       }\n                          \n                   if(cmd==\"AMB\")\n                       {\n                          //int d;\n                          cin>>a;\n                          cin>>d;\n                          s1.AMB(a,d);\n                       }\n                       \n                    if (cmd==\"DN\")\n                       {\n                           cin>>a;\n                           s1.DN(a);\n                       }\n                     if(cmd==\"DNA\")\n                        {\n                            cin>>a;\n                            s1.DNA(a);\n                        }\n                        if (cmd==\"DNB\")\n                          {\n                              cin>>a;\n                              s1.DNB(a);\n                          }\n                    if(cmd==\"PR\")\n                        {\n                             s1.PR();\n                        }\n                        \n                    if (cmd==\"FPR\")\n                        {\n                            s1.FPR();\n                        }\n                        \n                    if(cmd==\"RPR\")\n                       {\n                           s1.reverse();\n                       }\n              }\n        return 0;\n      }",
  "name": "200240320057_linklist.cpp"
 },
 {
  "code": "#include<iostream>\n#include<cstring>\n#include<stdlib.h>\n\nusing namespace std;\n\nclass Node\n{\nprivate:\n    int data;\n    Node *next;\npublic:\n    Node()\n    {\n        data=0;\n        next=NULL;\n    }\n\n    Node(int data)\n    {\n        this->data=data;\n        next=NULL;\n    }\n\n    int getdata()\n    {\n        return data;\n    }\n\n    Node* getnext()\n    {\n        return next;\n    }\n\n    void setnext(Node *next)\n    {\n        this->next=next;\n    }\n};\n\nclass List\n{\nprivate:\n    Node *head;\npublic:\n    List()\n    {\n        head=NULL;\n    }\n\n    void AB(int data)\n    {\n        Node *add;\n        add=new Node(data);\n        add->setnext(head);\n        head=add;\n    }\n\n    void AE(int data)\n    {\n        Node *add;\n        add=new Node(data);\n        Node *temp;\n        temp=head;\n        if(head==NULL)\n        head=add;\n        else\n        {\n            while(temp->getnext()!=NULL)\n            {\n                temp=temp->getnext();\n            }\n            temp->setnext(add);\n        }\n    }\n\n    void AMA(int after, int data)\n    {\n        Node *add;\n        add=new Node(data);\n        Node *temp=head;\n        while(temp!=NULL)\n        {\n            if(temp->getdata()==after)\n            {\n                add->setnext(temp->getnext());\n                temp->setnext(add);\n                break;\n            }\n            temp=temp->getnext();\n        }\n    }\n\n    void AMB(int before, int data)\n    {\n        Node *add;\n        add=new Node(data);\n        Node *temp=head;\n        Node *temp1=head;\n        while(temp!=NULL)\n        {\n            if(temp->getdata()==before)\n            {\n                if(head->getdata()==before)\n                {\n                    add->setnext(temp);\n                    head=add;\n                }\n                else\n                {\n                    add->setnext(temp);\n                    temp1->setnext(add);\n                    break;\n                }\n            }\n            temp1=temp;\n            temp=temp->getnext();\n        }\n    }\n\n    void DN(int data)\n    {\n        Node *temp=head;\n        Node *temp1=head;\n        while(temp!=NULL)\n        {\n            if(temp->getdata()==data)\n            {\n                if(temp==head)\n                {\n                    head=temp;\n                    delete [] temp;\n                }\n                else\n                {\n                    temp1->setnext(temp->getnext());\n                    delete [] temp;\n                    break;\n                }\n            }\n            temp1=temp;\n            temp=temp->getnext();\n        }\n    }\n    /*\n    void DNA(int data)\n    {\n        Node *temp=head;\n        Node *temp1=temp->getnext();\n        while(temp1->getnext()!=NULL)\n        {\n            if(temp1->getdata()==data)\n            {\n                break;\n            }\n            if(temp->getdata()==data && temp==head)\n            {\n                temp->setnext(temp->getnext()->getnext());\n                break;\n            }\n            if(temp->getdata()==data)\n            {\n                temp->setnext(temp1->getnext());\n                break;\n            }\n            temp=temp->getnext();\n            temp1=temp->getnext();\n        }\n    }\n    */\n    void DNA(int data)\n    {\n        Node *temp=head;\n        Node *temp1=head;\n        while(temp->getnext()!=NULL)\n        {\n            if((temp1->getnext()==NULL) && (temp1->getdata()==data))\n            {\n                break;\n            }\n            if(temp->getdata()==data && temp==head)\n            {\n                temp->setnext(temp->getnext()->getnext());\n                break;\n            }\n            if(temp->getdata()==data)\n            {\n                temp->setnext(temp1->getnext());\n                break;\n            }\n            temp=temp->getnext();\n            temp1=temp->getnext();\n        }\n    }\n    /*\n    void DNB(int data)\n    {\n        Node *temp=head->getnext();\n        Node *temp1=temp;\n        Node *temp2=head;\n        while(temp!=NULL)\n        {\n            if(temp->getdata()==data)\n            {\n                if(temp1==head)\n                {\n                    head=temp;\n                    temp1->setnext(NULL);\n                    delete [] temp1;\n                }\n                else\n                {\n                    temp2->setnext(temp);\n                    delete [] temp1;\n                    break;\n                }\n            }\n            temp2=temp1;\n            temp1=temp;\n            temp=temp->getnext();\n        }\n    }\n    */\n    void DNB(int data)\n    {\n        Node *temp=head;\n        Node *temp1=head;\n        Node *temp2=head;\n        while(temp!=NULL)\n        {\n            if(temp->getdata()==data)\n            {\n                if(temp==head)\n                {\n                    break;\n                }\n                if(temp1==head)\n                {\n                    head=temp;\n                    //temp1->setnext(NULL);\n                    delete [] temp1;\n                }\n                else\n                {\n                    temp2->setnext(temp);\n                    delete [] temp1;\n                    break;\n                }\n            }\n            temp2=temp1;\n            temp1=temp;\n            temp=temp->getnext();\n        }\n    }\n\n    void PR()\n    {\n        Node *temp;\n        temp=head;\n        while(temp!=NULL)\n        {\n            cout<<temp->getdata();\n            if(temp->getnext()!=NULL)\n            cout<<\" \";\n            temp=temp->getnext();\n        }\n        cout<<endl;\n    }\n\n    void FPR()\n    {\n\n        Node *temp;\n        temp=head;\n        while(temp!=NULL)\n        {\n            cout<<temp->getdata();\n            if(temp->getnext()!=NULL)\n            cout<<\"->\";\n            temp=temp->getnext();\n        }\n        cout<<endl;\n    }\n\n    void RPR()\n    {\n        Node *temp;\n        //temp=head;\n        //int *store;\n        int count=0;\n\n        for(temp=head;temp!=NULL;temp=temp->getnext())\n        count++;\n\n        /*while(temp!=NULL)\n        {\n            count++;\n            temp=temp->getnext();\n        }\n        */\n        temp=head;\n        int store[count];\n        //store=new int[count];\n        for(int i=0;i<count;i++)\n        {\n            store[i]=temp->getdata();\n            temp=temp->getnext();\n        }\n        for(int i=count-1;i>=0;i--)\n        {\n            cout<<store[i];\n            if(i>0)\n                cout<<\" \";\n        }\n        cout<<endl;\n    }\n\n    ~List()\n    {\n        while(head!=NULL)\n        {\n            Node *temp;\n            temp=head;\n            head=head->getnext();\n            delete [] temp;\n        }\n    }\n};\n\nint main()\n{\n    List obj;\n    string str;\n    int d;\n    do\n    {\n        cin>>str;\n        if(str==\"AB\")\n        {\n            cin>>d;\n            obj.AB(d);\n        }\n\n        if(str==\"AE\")\n        {\n            cin>>d;\n            obj.AE(d);\n        }\n\n        if(str==\"AMA\")\n        {\n            int after;\n            cin>>after>>d;\n            obj.AMA(after,d);\n        }\n\n        if(str==\"AMB\")\n        {\n            int before;\n            cin>>before>>d;\n            obj.AMB(before,d);\n        }\n\n        if(str==\"DN\")\n        {\n            cin>>d;\n            obj.DN(d);\n        }\n\n        if(str==\"DNA\")\n        {\n            cin>>d;\n            obj.DNA(d);\n        }\n\n        if(str==\"DNB\")\n        {\n            cin>>d;\n            obj.DNB(d);\n        }\n\n        if(str==\"PR\")\n        {\n            obj.PR();\n        }\n\n        if(str==\"FPR\")\n        {\n            obj.FPR();\n        }\n\n        if(str==\"RPR\")\n        {\n            obj.RPR();\n        }\n\n    }while(str!=\"EXIT\");\n    return 0;\n}\n",
  "name": "200240320061_linklist.cpp"
 },
 {
  "code": "#include<iostream>\n#include<stdlib.h>\n\nusing namespace std;\n\nclass Node{\n    private:\n        int data;\n        Node *next;\n    public:\n        Node()\n        {\n        data=0;\n        this->next=NULL;\n        }\n        Node(int data)\n        {\n        this->data=data;\n        next=NULL;\n        }\n        ~Node()\n        {\n            next=NULL;\n        }\n        int getdata()\n        {\n        return data;\n        } \n        Node *getnext()\n        {\n        return next;\n        }\n        void setnext(Node *next)\n        {\n        this->next=next;\n        }\n    };\n    \n    \nclass linklist\n    {\n        private:\n            Node*head;\n        public:\n            linklist()\n        {\n        head=NULL;\n        }\n    \n    void AE(int data)\n    {\n        Node *node=new Node(data);\n        if (head==NULL)\n        {\n            head=node;\n        }\n        else\n        {\n            Node *temp=head;\n            while(temp->getnext()!=NULL)\n            {\n                temp=temp->getnext();\n            }\n            temp->setnext(node);\n        }     \n    }\n \nvoid AB(int data)\n{\n    Node *node=new Node(data);\n    if(head==NULL)\n    {\n        head=node;\n    }\n    else\n    {\n    node->setnext(head);\n    head=node;\n    }\n}\n\n\nint AMB(int tobe,int before)\n{\nNode*node=new Node(before);\nNode*temp=head;\nNode *prev=head;\nwhile(temp->getdata()!=tobe)\n{\n    prev=temp;\n    temp=temp->getnext();\n    if(temp==NULL)\n    {\n        return 0;\n    }\n}\nif(head->getdata()==tobe)\n{\n    node->setnext(head);\n    head=node;\n}\nelse\n{\n    node->setnext(prev->getnext());\n    prev->setnext(node);\n    }\n}\n\n\nvoid AMA(int tobe,int after)\n{\n    Node *node=new Node(after);\n    Node *temp=head;\n    while(temp!=NULL && temp->getdata()!=tobe)\n    {\n        temp=temp->getnext();\n        if(temp==NULL)\n        {\n            return ;\n        }\n    }\n   if(head->getdata()==tobe)\n        {\n            node->setnext(head->getnext());\n            head->setnext(node);\n        }\n        else\n        {\n            node->setnext(temp->getnext());\n            temp->setnext(node);\n        }\n            \n}\n          \nint DN(int data)\n{\n    Node*temp=head;\n    Node*prev=head;\n    while(temp->getnext()!=NULL && temp->getdata()!=data)\n    {\n        prev=temp;\n        temp=temp->getnext();\n    }\n        prev->setnext(temp->getnext());\n        delete temp;\n}\n\n\nNode *DNA(int after)\n{\n        Node *temp=head;\n        Node *next=head;\n        while(temp->getdata()!=after && temp->getnext()!=NULL)\n        {\n                temp=temp->getnext();\n                next=temp->getnext();\n        }\n        while(1)\n        {\n            if(temp->getnext()==NULL)\n            {\n                    break;\n            }\n            else if(next->getnext()==NULL)\n            {\n                temp->setnext(NULL);\n                delete next;\n            }\n            else if(temp->getdata()==after)\n            {\n                next=temp->getnext();\n                Node *temp1=next->getnext();\n                temp->setnext(temp1);\n                delete next;\n            }\n            break;\n        }\n}\n\n\nNode *DNB (int before)\n{\n    Node *temp=head;\n    Node *prev=head;\n    while(1)\n    {\n        if(temp->getdata()==before && temp!=NULL)\n        {\n            break;\n        }\n        while(temp->getnext()->getdata()!=before)\n        {\n            prev=temp;\n            temp=temp->getnext();\n        }\n        if(temp==head)\n        {\n            head=temp->getnext();\n            delete temp;\n        }\n        else\n        {\n            prev->setnext(temp->getnext());\n        }\n        break;\n    }\n}\n    void RPR()\n    {\n    int count=1;\n    Node *temp=head;\n    Node *temp1=head;\n    while(temp->getnext()!=NULL)\n    {\n    temp=temp->getnext();\n    count=count+1;\n    }\n    int *store;\n    store=new int[count];\n    \n    for(int i=1;i<=count;i++)\n    {\n            store[i]=temp1->getdata();\n            temp1=temp1->getnext();\n    }\n    for(int j=count;j>=1;j--)\n    {\n        cout<<store[j]<<\"  \";\n    }\n    cout<<endl;\n}\n void PR()\n {\n     Node *temp=head;\n     while(temp!=NULL)\n     {\n        cout<<temp->getdata()<<\" \";\n        temp=temp->getnext();\n     }\n     cout<<endl;\n }\n void FPR()\n {\n     Node *temp=head;\n     while(temp->getnext()!=NULL)\n     {\n         cout<<temp->getdata()<<\"->\";\n         temp=temp->getnext();\n         if(temp->getnext()==NULL)\n         {\n         cout<<temp->getdata();\n         break;\n         }\n           cout<<endl;\n     }\n}\n        \n         ~linklist()\n         {\n                while(head!=NULL)\n                {\n                    Node *temp=head;\n                    head=head->getnext();\n                    delete temp;\n                }\n         }\n};\nint main()\n{\n    linklist l;\n    string cmd;\n    do\n    {\n        cin>>cmd;\n        if(cmd==\"AB\")\n        {\n            int data;\n            cin>>data;\n            l.AB(data);\n        }\n\n        if(cmd==\"AE\")\n        {\n            int data;\n            cin>>data;\n            l.AE(data);\n        }\n\n        if(cmd==\"AMB\")\n        {\n            int data,before;\n            cin>>data;\n            cin>>before;\n            l.AMB(data,before);\n        }\n\n        if(cmd==\"AMA\")\n        {\n            int data,after;\n            cin>>data;\n            cin>>after;\n            l.AMA(data,after);\n        }\n \n        if(cmd==\"DN\")\n        {\n            int data;\n            cin>>data;\n            l.DN(data);\n        }\n\n        if(cmd==\"DNA\")\n        {\n            int data;\n            cin>>data;\n            l.DNA(data);\n        }\n \n        if(cmd==\"DNB\")\n        {\n            int data;\n            cin>>data;\n            l.DNB(data);\n        }\n\n        if(cmd==\"RPR\")\n        {\n            l.RPR();\n        }\n    \n        if(cmd==\"PR\")\n        {\n            l.PR();\n        }\n    \n        if(cmd==\"FPR\")\n        {\n            l.FPR();\n        }\n    }\n    while(cmd !=\"EXIT\");\n    return 0;\n}\n",
  "name": "200240320067_linklist.cpp"
 },
 {
  "code": "#include<iostream>\nusing namespace std;\nclass Node\n{\n    private: \n            int data;\n            Node* next;\n    public: \n            Node(int data)\n            {\n                this->data = data;\n                next = NULL;                \n            }\n            \n            int getdata()\n            {\n                return data;\n            }\n            Node* getnext()\n            {\n                return next;\n            }\n            void setnext(Node* next)\n            {\n                this->next = next;\n            }\n};\n\nclass list\n{\n    private: Node* head;\n    \n    public :\n            list()\n            {\n                head = NULL;\n            }\n            void AB(int data)\n            {\n                Node* node = new Node(data);\n               \n                if(head == NULL)\n                {\n                    head = node;\n                }\n                else\n                {   \n                        node->setnext(head);\n                        head = node;\n                 }\n                    \n            }\n            \n            void AE(int data)\n            {\n                Node* node = new Node(data);\n                Node* temp = head;\n                if(head == NULL)\n                {\n                    head = node;\n                }\n                else\n                {   \n                    while(temp->getnext()!=NULL)\n                    {\n                        temp = temp->getnext();\n                    }\n                    temp->setnext(node);\n                    \n                }\n            }\n            \n            void AMA(int AFTER,int A)\n            {\n                Node* node = new Node(A);\n                Node* temp = head;\n                if(head == NULL)\n                {\n                    head = node;\n                }\n                /*else if(head->getdata() == A) \n                {\n                    A->setnext(head);\n                     head = A;\n                    \n                }else{*/\n                    while(temp->getdata()!=AFTER && temp!=NULL)\n                    {\n                        temp = temp->getnext();\n                    }\n                    node->setnext(temp->getnext());\n                    temp->setnext(node);\n                \n                \n            }\n            \n            void AMB(int BEFORE,int B)\n            {\n                Node* node=new Node(B);\n                Node* temp=head;\n                Node* prev=head;\n                if(head->getdata() == BEFORE)\n                {\n                    node->setnext(head);\n                    head = node;\n                }\n                else if(head!=NULL)\n                {\n                    while(temp!=NULL && temp->getdata()!=BEFORE)\n                    {       \n                        prev = temp;\n                        temp = temp->getnext();\n                    }\n                    node->setnext(prev->getnext());\n                    prev->setnext(node);\n                }\n                \n            }\n               \n               void DN(int data)\n            {\n                Node* temp = head;\n                Node* prev = head;\n               if(head == NULL)\n               {\n                  \n               } if(head->getdata()!=data)\n                        {\n                            while(temp!=NULL && temp->getdata()!=data)\n                            {   \n                                prev = temp;\n                                temp=temp->getnext();\n                            }    \n                            prev->setnext(temp->getnext());\n                            delete temp;\n                        }\n                    else if(head->getdata() == data)\n                    {\n                         prev = head;    \n                         head = head->getnext();\n                         delete prev;\n                         \n                    }\n            }   \n            \n                int DNA(int data)\n             {\n                Node* temp = head;\n                Node* after = head;\n                Node* temp2=head; \n                while(temp2->getnext()!=NULL)\n                {\n                        temp2=temp2->getnext();\n                }\n                if(temp2->getdata()==data)\n                {\n                    return 0;\n                }\n                \n                    while(temp->getdata()!=data)\n                        {\n                            temp = temp->getnext();\n                            if(temp==NULL)\n                            {\n                                return  0;\n                            }\n                        }\n                    after = temp->getnext();\n                    temp->setnext(after->getnext());    \n                    delete after;                                           \n                \n            }\n            \n            int DNB(int data)\n            {\n               \n                Node* prev = head;\n                Node* temp = head;\n                if(head->getdata() == data)\n                {\n                    return 0;\n                }\n                else if(head->getnext()->getdata() == data)\n                    {\n                        head = head->getnext();   \n                    }\n                    else\n                    {    \n                    while(temp!=NULL && temp->getnext()->getdata()!=data)\n                    {\n                        prev = temp;\n                        temp = temp->getnext();\n                    \n                    }\n                prev->setnext(temp->getnext());\n                delete temp;\n                }\n            }\n            \n             int REVERSE(Node* temp)\n            {\n                \n                if(temp->getnext()!=NULL)\n                    {\n                        REVERSE(temp->getnext());\n                    }                    \n                        cout<<temp->getdata()<<\" \";\n            }\n            \n            void RPR()\n            {\n                Node* temp = head;\n                REVERSE(temp);\n                cout<<endl;\n            }\n            \n             void FPR()\n            {\n                Node* temp = head;\n                while(temp->getnext()!=NULL)\n                { \n                    cout<<temp->getdata()<<\"->\";\n                    temp = temp->getnext();\n                }\n                    cout<<temp->getdata()<<endl;\n            }\n              \n            void PR()\n            {\n                Node* temp = head;\n                while(temp!=NULL)\n                { \n                    cout<<temp->getdata()<<\" \";\n                    temp = temp->getnext();\n                }\n                cout<<endl;\n            }\n                \n};\n\nint main()\n{\n    list L;\n    \n    int data;\n    string s;\n   \n     while(1)\n{\n     cin>>s;\n    if(s == \"AB\")\n    {\n        cin>>data;\n        L.AB(data);\n    }\n    if(s == \"AE\")\n    {\n        cin>>data;\n        L.AE(data);\n    }\n     if(s == \"AMA\")\n    {\n        int after;\n        cin>>after;\n        cin>>data;\n        L.AMA(after,data);\n    }\n     if(s == \"AMB\")\n    {\n        int before;\n        cin>>before;\n        cin>>data;\n        L.AMB(before,data);\n    }\n     if(s == \"DN\")\n    {\n        cin>>data;\n        L.DN(data);\n    }\n    if(s == \"DNA\")\n    {\n        int d;\n        cin>>d;\n        L.DNA(d);\n    }\n    \n     if(s == \"DNB\")\n    {\n        int d;\n        cin>>d;\n        L.DNB(d);\n    }\n    \n     if(s == \"FPR\")\n    {\n        L.FPR();\n    }\n    \n     if(s == \"RPR\")\n    {\n       L.RPR();\n    }\n    \n     if(s == \"PR\")\n    {\n        L.PR();\n    }\n    if(s == \"EXIT\")\n    {\n        break;\n    }\n}\n    \n    return 0;\n}",
  "name": "200240320114_linklist.cpp"
 },
 {
  "code": "#include<iostream>\n#include<stdlib.h>\nusing namespace std;\nclass Node\n{\n    private:\n       int data;\n       Node *next;\n    public:\n            Node(int data)\n             {\n                this->data=data;\n                next=NULL;\n             }\n           /* ~Node()\n            {\n                \n             }*/\n    \n       int getdata()\n       {\n           return data;\n      }\n\n       Node *getNext()\n       {\n           return next;\n      }\n     \n      void setNext(Node* next)\n      {\n          this->next=next;\n      }\n};\n\nclass Linklist\n{\n    private:\n             Node *head;\n           \n    public:\n           Linklist()\n           {\n               head=NULL;\n               \n           }\n          /*  ~Linklist()\n         {\n        \n         }*/\n           \n            void AB(int data)\n            {\n                Node *node=new Node(data);\n                if(head==NULL)\n                {\n                 head=node;\n                }\n                else\n                {\n                 node->setNext(head);\n                  head=node;\n                 }\n            }\n\n        \n    \n    void AE(int data)\n    {\n        Node *node=new Node(data);\n        if(head==NULL)\n        {\n            head=node;\n        }    \n        else\n        {    \n            Node *temp=head;\n            while(temp->getNext()!=NULL)\n            {\n              temp=temp->getNext();\n            }  \n                temp->setNext(node);\n            \n        }\n    }\n    int DN(int data)\n    {\n        Node *temp=head;\n        Node *prev=head;\n        while(temp->getdata()!=data)\n        {\n            prev=temp;\n            temp=temp->getNext();\n            if(temp==NULL)\n            {\n                return 0;\n            }\n        }\n        if(head->getdata()==data)\n        {\n       \n        head=head->getNext();\n        delete temp;\n        }\n        else\n        {\n            \n         prev->setNext(temp->getNext());\n        delete temp;\n        }\n        \n    }\n        \n    int DNA(int data)\n    {\n        Node *temp=head;\n        Node *prev=head;\n        while( temp->getdata()!=data)\n        {\n            if(temp->getdata()!=data)\n            {\n           prev=temp;\n           temp=temp->getNext();\n           if(temp==NULL)\n           {\n               return 0;\n           }\n          }\n        }\n        prev=temp;\n        temp=temp->getNext();\n        if(temp!=NULL)\n        {\n            prev->setNext(temp->getNext());\n        }\n        delete temp;\n    }\n    int DNB(int data)\n    {\n        Node *temp=head;\n        Node *prev=head;\n         \n        if(head->getdata()==data)\n        {\n            return 0;\n        }\n        if(head->getNext()->getdata()==data)\n        {\n            head=head->getNext();\n        }\n        \n            while(temp->getNext()->getdata()!=data)\n            {\n                prev=temp;\n                temp=temp->getNext();\n            }\n           \n            prev->setNext(temp->getNext());\n            delete temp;\n            \n        //if(head->getNext()->getdata()==data)\n        //{\n          //  head=head->getNext();\n        \n        \n    }\n    \n    int AMA(int aft,int data)\n    {\n        Node *node=new Node(data);\n        Node *temp=head;\n            while(temp->getdata()!=aft)\n            {  \n                temp=temp->getNext();\n                if(temp==NULL)\n                {\n                    return 0;\n                }\n            }\n            if(head->getdata()==aft)\n            {\n               node-> setNext(head->getNext());\n               head->setNext(node);\n            }\n            else\n            {\n                node->setNext(temp->getNext());\n                temp->setNext(node);\n            }\n       }    \n    \n    int AMB(int bef,int data)\n     {\n         Node *newnode=new Node(data);\n           Node*temp=head;\n           Node*prev=head;\n             while( temp->getdata()!=bef)\n             {\n                prev=temp;\n                temp=temp->getNext();\n                if(temp==NULL)\n                {\n                    return 0;\n                }\n             }\n             if(head->getdata()==bef)\n             {\n                 newnode->setNext(head);\n                 head=newnode;\n                 \n             }\n             else\n             {\n                // newnode->setNext(prev->getNext());\n                // prev->setNext(newnode);\n                newnode->setNext(prev->getNext());\n               prev->setNext(newnode);\n                \n             }           \n     }\n      \n      void PR()\n    {\n        Node *temp=head;\n        while(temp!=NULL)\n        {\n            cout<<temp->getdata()<<\" \";\n            temp=temp->getNext();\n        }\n        cout<<endl;\n        \n    }\n     void FPR()\n     {\n         Node *temp=head;\n         //while(1)\n         //{\n             while(temp->getNext()!=NULL)\n             {\n                 cout<<temp->getdata()<<\"->\";\n                  temp=temp->getNext();\n             }\n             cout<<temp->getdata()<<endl;\n            \n         //}\n        // cout<<endl;\n     }\n     void RPR()\n     {\n         Node *temp;\n         temp=head;\n         Reverse(temp);\n         cout<<endl;\n     }\n     void Reverse(Node*temp)\n     {\n         if(temp->getNext()!=NULL)\n         {\n             Reverse(temp->getNext());\n         }\n         cout<<temp->getdata()<<\" \";\n     }\n     /*void RPR(Linklist L1)\n     {\n         Node* temp;\n         while(temp!=NULL)\n         {\n             L1.AB(temp->getdata());\n             temp=temp->getNext();\n         }\n         L1.PR();\n     }*/\n    \n  \n  };\n    \n    int main()\n    {\n        string cmd;\n        Linklist l2;\n        int data,a;\n        while(1)\n        {\n            cin>>cmd;\n            \n            if(cmd==\"AB\")\n            {\n                  cin>>data;\n                  l2.AB(data);\n            }\n            if(cmd==\"AE\")\n            {\n                \n                cin>>data;\n                l2.AE(data);\n            }\n            \n            if(cmd==\"PR\")\n            {\n                \n                l2.PR();\n            }\n            if(cmd==\"FPR\")\n            {\n                l2.FPR();\n            }\n            if(cmd==\"RPR\")\n            {\n                l2.RPR();\n            }\n            \n            if(cmd==\"DN\")\n            {\n                cin>>data;\n                l2.DN(data);\n            }\n            if(cmd==\"DNA\")\n            {\n               cin>>data;\n                l2.DNA(data);\n            }\n            if(cmd==\"DNB\")\n            {\n                cin>>data;\n                l2.DNB(data);\n            }\n            if(cmd==\"AMA\")\n            {\n                \n                cin>>a>>data;\n                l2.AMA(a,data);\n            }\n            if(cmd==\"AMB\")\n            {\n                 cin>>a>>data;\n                 l2.AMB(a,data);\n            }\n            if(cmd==\"EXIT\")\n            {\n                exit(0);\n            }\n            \n        }\n        return 0;\n    }",
  "name": "200240320124_linklist.cpp"
 },
 {
  "code": "# include <iostream>\n\nusing namespace std;\n\nclass Node\n    {\n            private:\n                    int data;\n                    Node *next;\n            public:\n                    Node()\n                        {\n                            next = NULL;\n                        }\n                    Node( int data)\n                        {\n                            this->data = data;\n                            this-> next = NULL;\n                        }\n                    ~Node()\n                        {\n                            next = NULL;\n                        }\n                    Node* getNext()\n                    {\n                        return next;\n                    }\n                    int getData()\n                    {\n                        return data;\n                    }\n                    void setNext(Node *next)\n                    {\n                        this->next = next;\n                    }\n    };\n    \nclass Linklist\n    {\n            private:\n                    Node *head;\n            public:\n                    Node* getHead()\n                        {\n                            return head;\n                        }\n                    Linklist()\n                        {\n                            head = NULL;         \n                        }\n                    ~Linklist()\n                        {\n                           while( head != NULL)\n                                {\n                                    Node *temp = head;\n                                    head = head->getNext();\n                                    delete temp;\n                                }\n                        }\n                    \n                    void RevPrint( Node* head)\n                        {\n                             Node *temp;\n                            temp = head;\n                            \n                            if(temp== NULL)\n                            {\n                                //cout<<endl;\n                                return;\n                            }\n                            RevPrint(temp->getNext());\n                                cout<<temp->getData()<<\" \";\n                                \n                        }\n                    void print()\n                        {\n                            Node *temp = head;\n                            while( temp!=NULL)\n                                {\n                                    cout<<temp->getData()<<\" \";\n                                    temp = temp->getNext();\n                                }\n                            cout<<endl;\n                        }\n                    void fancyPrint()\n                        {\n                            Node *temp = head;\n                            while( temp!=NULL)\n                                {\n                                    if(temp->getNext() != NULL)\n                                    {\n                                        cout<<temp->getData()<<\"->\";\n                                        temp = temp->getNext();\n                                    }\n                                    else if(temp->getNext() == NULL)\n                                    {\n                                        cout<<temp->getData()<<endl;\n                                        temp = temp->getNext();\n                                    }\n                                }\n                            \n                        }\n                    void addatB( int data)\n                        {\n                            Node* newnode;\n                            newnode = new Node(data);\n                            newnode->setNext(head);\n                            head = newnode;\n                        }\n                    \n                      void addatE( int data)\n                        {\n                            Node* newnode;\n                            newnode = new Node(data);\n                            if(head ==NULL)\n                                {\n                                    head = newnode; \n                                }\n                            else\n                                {\n                                    Node* temp;\n                                    temp = head;\n                                    while(temp->getNext() !=NULL)\n                                        {\n                                            temp = temp->getNext();\n                                        }\n                                    temp->setNext(newnode);\n                                }\n                        }\n                    \n                    void addatMA(int after, int data)\n                        {\n                            Node* newnode;\n                            newnode = new Node(data);\n                            if(head ==NULL)\n                                {\n                                  //  head = newnode; \n                                }\n                            else\n                                {\n                                    Node* temp;\n                                    temp = head;\n                                    while((temp != NULL) && (temp->getData() != after))\n                                        {\n                                            temp = temp->getNext();\n                                        }\n                                    if(temp == NULL)\n                                        {\n                                            //cout<<\"Data NOT FOUND\"<<endl;\n                                        }\n                                    else\n                                        {\n                                            newnode->setNext(temp->getNext());\n                                            temp->setNext(newnode);\n                                        }\n                                } \n                        }\n                        \n                    void addatMB( int before, int data)\n                        {\n                            Node* newnode;\n                            newnode = new Node(data);\n                            if(head ==NULL)\n                                {\n                                   // head = newnode; \n                                }\n                            else\n                                {\n                                    Node* temp1;\n                                    Node* temp2;\n                                    temp1 = head;\n                                    temp2 = head;\n                                    while((temp1 != NULL) && (temp1->getData() != before))\n                                        {\n                                            temp2 = temp1;\n                                            temp1 = temp1->getNext();\n                                        }\n                                  if(temp1 == head)\n                                  {\n                                       newnode->setNext(temp1);\n                                       this->head = newnode;\n                                  }\n                                   else if(temp1 != NULL)\n                                        {\n                                            newnode->setNext(temp1);\n                                            temp2->setNext(newnode);\n                                        }\n                                    else if (temp1 == NULL)\n                                        {\n                                            //Data Not Found\n                                        }\n                                } \n                        }\n                        \n                        void delN( int data)\n                            {\n                                    Node* temp1;\n                                    Node* temp2;\n                                    temp1 = head;\n                                    temp2 = head;\n                                    while((temp1 != NULL) && (temp1->getData() != data))\n                                        {\n                                            temp2 = temp1;\n                                            temp1 = temp1->getNext();\n                                        }\n                                    if(temp1 == this->head)\n                                        {\n                                           this->head = temp1->getNext();\n                                            temp1 = NULL;\n                                            temp2 = NULL;\n                                        }\n                                    else if(temp1 == NULL)\n                                        {\n                                      //  cout<<\"Data NOT FOUND\"<<endl;\n                                        temp2 = NULL;\n                                        }\n                                    else if(temp1 != NULL)\n                                        {\n                                            temp2->setNext(temp1->getNext());\n                                            temp1->setNext(NULL);\n                                        }\n                            }\n                        \n                        void delAN( int data)\n                            {\n                                Node* temp1;\n                                Node* temp3;\n                                    temp1 = head;\n                                    temp3 = NULL;\n                                \n                                    while((temp1 != NULL) && (temp1->getData() != data))\n                                        {\n                                            temp1 = temp1->getNext();\n                                        }\n                                    \n                                     if(temp1 == NULL)\n                                        {\n                                    //    cout<<\"Data NOT FOUND\"<<endl;\n                                        temp3 = NULL;\n                                        } \n                                    else if(temp1->getNext() ==NULL)\n                                        {\n                                            //cout<<\"No data present after tail\"<<endl;\n                                           // temp3 = NULL;\n                                        }\n                                    else\n                                        {\n                                            \n                                           temp3 = temp1->getNext();\n                                           temp1->setNext(temp3->getNext());\n                                           temp3->setNext(NULL);\n                                           temp3 = NULL;\n                                        }\n                            } \n                            \n                        void delBN( int data)\n                            {\n                                Node* temp1;\n                                Node* temp2;\n                                Node* temp3;\n                                temp1 = head;\n                                temp2 = head;\n                                temp3 = head;\n                                \n                                \n                                    while((temp1 != NULL) && (temp1->getData() != data))\n                                        {\n                                            temp3 = temp2;\n                                            temp2 = temp1;\n                                            temp1 = temp1->getNext();\n                                        }\n                                    \n                                     if(temp1 == NULL)\n                                        {\n                                       // cout<<\"Data NOT FOUND\"<<endl;\n                                        temp3 = NULL;\n                                        temp2 = NULL;\n                                        }\n                                    else if(temp1 == head)\n                                        {\n                                           // cout<<\"No data present before head\"<<endl;\n                                            temp3 = NULL;\n                                            temp2 = NULL;\n                                        }\n                                    else if(temp2 == head && temp3 == head)\n                                        {\n                                            this->head = temp1;\n                                            temp2->setNext(NULL);\n                                            temp3 = NULL;\n                                            temp2 = NULL;\n                                        }\n                                    else if(temp1 != NULL)\n                                        {\n                                            \n                                           temp3->setNext(temp1);\n                                           temp2->setNext(NULL);\n                                           temp3 = NULL;\n                                           temp2 = NULL;\n                                        }\n                            } \n                            \n    };\n\nint main()\n    {\n        Linklist p;\n           while(1)\n            {\n                string cmd;\n                cin>>cmd;                \n             //  p.addatB(30);\n             //    p.print();\n                \n                if(cmd == \"EXIT\")\n                    {\n                        //cout<<\"e\"<<endl;\n                        break;\n                     }\n               else if(cmd == \"AB\")\n                    {\n                        int val;\n                        cin>>val;\n                        p.addatB(val);\n                        //continue;\n                    }\n                 else if(cmd == \"PR\")\n                    {\n                        p.print();\n                        //continue;\n                    }\n                else if(cmd == \"FPR\")\n                    {\n                        p.fancyPrint();\n                        //continue;\n                    }\n                else if(cmd == \"AE\")\n                    {\n                        int val;\n                        cin>>val;\n                        p.addatE(val);\n                    }\n                else if(cmd == \"AMA\")\n                    {\n                        int data, after;\n                        cin>>after>>data;\n                        p.addatMA(after, data);\n                    }\n                else if(cmd == \"AMB\")\n                    {\n                        int data, before;\n                        cin>>before>>data;\n                        p.addatMB(before, data);\n                    }\n                else if(cmd == \"DN\")\n                    {\n                        int data;\n                        cin>>data;\n                        p.delN(data);\n                    }\n                else if(cmd == \"DNA\")\n                    {\n                        int data;\n                        cin>>data;\n                        p.delAN(data);\n                    }\n                else if(cmd == \"DNB\")\n                    {\n                        int data;\n                        cin>>data;\n                        p.delBN(data);\n                    }\n                else if(cmd == \"RPR\")\n                    {\n                        \n                        p.RevPrint(p.getHead());\n                        cout<<endl;\n                    }\n            }   \n                \n            \n        return 0;\n    }",
  "name": "200240320138_linklist.cpp"
 }
]