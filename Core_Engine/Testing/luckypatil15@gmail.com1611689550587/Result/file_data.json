[
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n       // avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        //avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320001.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\n#define MAIN_FUNCTION main\n#define CLASSES_class class\n#define FOR_LOOP for\n#define INTEGER int\n#define ANKIT return\n#define ppppppppppp public\n#define if_looop if\n#define else_Loop else\n#define console cout\n#define cinnnnnnn cin\n#define break_ifloop break\n#define MAP vector\n#define STD using namespace std\n#define LH {\n#define RH }\nSTD;\n\n void ABhishek()\n    LH\n       long long  int var = var+1;\n        double ar[50000];\n        while (var !=0)\n          {\n              var++;\n              var = var+1;\n          RH\n         \n    RH\n    \n    \n     void DADA()\n    LH\n       long long  int var = var+1;\n        double ar[50000];\n        while (var !=0)\n          LH\n              var++;\n              var = var+1;\n          RH\n         \n    RH\n\n void PRANAY()\n    LH\n       long long  int var = var+1;\n        double ar[50000];\n        while (var !=0)\n          LH\n              var++;\n              var = var+1;\n          RH\n         \n    RH\n     void ANKIT_suravkar()\n    LH\n       long long  int var = var+1;\n        double ar[50000];\n        string movName;\n    typedef float FLOAT;// stores movie name\n    FLOAT totRating; // stores sum total of all ratings\n    FLOAT totReviewer; // stores sum total of all reviewers\n\n        while (var !=0)\n          LH\n              var++;\n              var = var+1;\n          RH\n         \n    RH\n    \n       void YAShya()\n    LH\n       long long  int var = var+1;\n        double ar[50000];\n        do \n        LH\n            int v = 100;\n            \n          \n              var++;\n              var = var+1;\n          RH while (var !=0);\n        \n        \n        ANKIT_suravkar();\n          \n         \n    }\n    \n       void LAXUUUMANNNNNNNN()\n    LH\n       long long  int var = var+1;\n        double ar[50000];\n        while (var !=0)\n          LH\n              var++;\n              var = var+1;\n          RH\n          long long  int vaar = vaar+1;\n        double ara[50000];\n        while (vaar !=0)\n          LH\n              vaar++;\n              vaar = vaar+1;\n          RH\n         \n    RH\n    \n    \n    \nCLASSES_class MOVIE_RATING\nLH\nprivate:\n    string movName;\n    typedef float FLOAT;// stores movie name\n    FLOAT totRating; // stores sum total of all ratings\n    FLOAT totReviewer; // stores sum total of all reviewers\n\nppppppppppp:\n\n    MOVIE_RATING()  // zero parameter constructor\n    LH\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    RH\n    \n    MOVIE_RATING ( string movName, FLOAT totRating ) //parameterized constructor\n    LH\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    RH\n\n    //Getter-Setter Functions\n    FLOAT get_totRating()\n    LH\n        ANKIT totRating;\n    RH\n    void set_totRating(FLOAT totRating)\n    LH\n        this->totRating = totRating;\n    RH\n\n    string get_movName()\n    LH\n        ANKIT movName;\n    RH\n    FLOAT get_totReviewer()\n    LH\n        ANKIT totReviewer;\n    RH\n    void set_totReviewer() //function call increases reviewers by 1;\n    LH\n        totReviewer++;\n    RH\n\n    //average calculation function\n    FLOAT get_avgRating() // function to get avg rating\n    LH\n        FLOAT avg = totRating/totReviewer;\n       // avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        //avg = (FLOAT)avg / 10; // round off average to one decimal\n        ANKIT avg;\n    RH\nRH;\n\nINTEGER  DUMMY_FUNCTION()\nLH\n\nfor(INTEGER i = 0; i< 50; i++)\n        LH\n            if_looop(10 == 5)\n                return i; //return index of the vector where movie is present\n        RH\n        return -1; //returns -1 if movie not present\nRH       \nINTEGER search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    LH\n        INTEGER i=0;\n       /* for(int i = 0; i< movie_List.size(); i++)\n        LH\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        RH\n        return -1; //returns -1 if movie not present*/\n        while(i< movie_List.size())\n          {\n                if_looop(movie_List[i].get_movName() == current_movie)\n                ANKIT i; \n                i++;\n          RH\n          ANKIT -1;\n    RH\ndouble get_result(float max_avgRating)\nLH\n   console << fixed << setprecision(1)<<max_avgRating ;\nRH\n\nINTEGER MAIN_FUNCTION()\nLH\n    MAP <MOVIE_RATING> movie_List;\n    typedef float FLOAT;//vector to store all movies\n    typedef string STRING1;\n    FLOAT current_rating;\n    STRING1 current_movie;\n    while(true)\n    LH\n        cinnnnnnn >> current_movie; // stores current movie\n\n        if_looop(current_movie == \"\"THE_END\"\") //loop break condition\n            break_ifloop;\n        else_Loop\n        LH\n            cinnnnnnn >> current_rating; // stores current rating\n\n            INTEGER Movie_Index = search_Movie(current_movie, movie_List); //search if_looop movie is already in the vector\n\n            if_looop(Movie_Index == -1) // if movie not present in vector add movie in vector\n            LH\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            RH\n            else_Loop  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            LH\n                FLOAT new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            RH\n        RH\n    RH\n    //Code to find maximum avg rating according to dictionary order\n    FLOAT max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    FOR_LOOP(INTEGER i = 1; i < movie_List.size(); i++)\n    LH\n        string movie = movie_List[i].get_movName();\n        FLOAT rating = movie_List[i].get_avgRating();\n\n        if_looop( max_avgRating < rating ) // check for maximum avg rating\n        LH\n           max_avgRating = rating;\n           max_movie_name = movie;\n        RH\n        if_looop (max_avgRating == rating) // check if rating are equal\n        LH\n            if_looop( movie <  max_movie_name ) //change the movie name according to dictionary order\n            LH\n                max_movie_name = movie;\n            RH\n        RH\n    RH\n \n  \n    \n   console << max_movie_name << \"\" \"\";  // print movie name\n   get_result(max_avgRating);\n   //cout<< fixed << setprecision(1)<<max_avgRating; // print max avg rating upto 1 decimal\n   \n   ANKIT 0;\nRH",
    "name": "200240320002.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    map<string,float> movie;\n    vector<string> mname;\n    string st;\n    int rating;\n    while(1)\n    {\n        cin>>st>>rating;\n        if(st == \"\"THE_END\"\")\n            break;\n            mname.push_back(st);\n            if(movie.find(st)!=movie.end())\n            {\n                movie[st]+=rating;\n            }\n            else{\n                \n                    movie[st]=rating;        \n            }\n    }\n    sort(mname.begin(),mname.end());\n    int count=1;\n    st=mname[0];\n    for(int i=1; i<mname.size() ;i++)\n    {\n        if(st==mname[i])\n        {\n            count++;\n            if(i==mname.size()-1)\n            {\n                 movie[st]=(float)movie[st]/count;\n                 break;\n            }\n        }\n        else{\n            movie[st]=(float)movie[st]/count;\n            st=mname[i];\n            count=1;\n             if(i==mname.size()-1)\n            {\n                 movie[st]=(float)movie[st]/count;\n                 break;\n            }\n        }\n    }\n    float maxi=movie[mname[0]];\n    string maxm=mname[0];\n    for(int i=1;i<mname.size();i++)\n    {\n        if(maxi<movie[mname[i]])\n        {\n            maxm=mname[i];\n            maxi=movie[mname[i]];\n            \n        }\n    }\n    cout<<maxm<<\"\" \"\";\n    printf(\"\"%.1f\"\", maxi);\n    \n    return 0;\n}",
    "name": "200240320003.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\n#include <queue>\n#include<stack>\n\nusing namespace std;\nqueue<int> q1;\n\nint ginti=0;\n\nclass MOVIE_RATING\n{\n    private:\n    \n        string movName; // stores movie name\n        float totRating; // stores sum total of all ratings\n        float totReviewer; // stores sum total of all reviewers\n\n    public:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        ginti++;\n        q1.push(ginti);\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    { \n        ginti++;\n        q1.push(ginti);\n        return totRating;\n    }\n    \n    void set_totRating(float totRating)\n    {\n         ginti++;\n        q1.push(ginti);\n        this->totRating = totRating;\n    }\n   \n    string ThrowN()\n    {\n         ginti++;\n        q1.push(ginti);\n        return movName;\n    }\n    \n       string get_movName()\n    {\n         ginti++;\n        q1.push(ginti);\n       ThrowN();\n       return movName;\n    }\n   \n    \n    float throwR()\n    {\n         ginti++;\n        q1.push(ginti);\n        return totReviewer;\n    }\n     \n     \n     float get_totReviewer()\n    {\n         ginti++;\n        q1.push(ginti);\n        throwR();\n  \n    }\n      \n  \n    void INCr()\n    {\n         ginti++;\n        q1.push(ginti);\n         totReviewer++;\n    }\n\n\n  void set_totReviewer() //function call increases reviewers by 1;\n    {\n         ginti++;\n        q1.push(ginti);\n        \n       INCr();\n    }\n\n\n  float THROWavg()\n    {\n         ginti++;\n        q1.push(ginti);\n      float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;  \n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n         ginti++;\n        q1.push(ginti);\n        \n        THROWavg();\n    }\n      \n};\n\n  \n\n    int search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    { ginti++;\n        q1.push(ginti);\n      \n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n    \n            return i; \n            //return index of the vector where movie is present\n        }\n        \n        return -1; //returns -1 if movie not present   \n    }\n    \n\n int call() // just empty function\n    { ginti++;\n        q1.push(ginti);\n        return 1; // return 1\n    }\n\n   stack <int>s1;\n\n    int count(int x) \n    { ginti++;\n        q1.push(ginti);\n        s1.push(x);\n        for(int i=0;i<x;i++)\n        {\n            s1.push(i);            \n            call();  //call function callled\n        }\n    }\n\n\nint main()\n{       ginti++;\n        q1.push(ginti);\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    ginti++;\n    q1.push(ginti);\n    string current_movie;\n    count(10);\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n        ginti++;\n        q1.push(ginti);\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n                ginti++;\n                q1.push(ginti);\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        \n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    ginti++;\n        q1.push(ginti);\n    return 0;\n}",
    "name": "200240320006.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320007.cpp"
  },
  {
    "code": "# include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320009.cpp"
  },
  {
    "code": "#include<iostream>\n#include<iomanip>\nusing namespace std;\n\nstruct Node\n{\npublic:\n    string name;\n    double rating;    \n    int flag;\n};\n\nint main()\n{\n    int i,j,k=0;\n    struct Node arr[50];\n    struct Node temp;\n//    struct Node *temp1;\n//    temp1=arr;\n    for(i=0;i<50;i++)\n    {\n        arr[i].flag=0;\n    }\n    string movie;\n    double rate;\n    cin>>movie>>rate;\n    if(movie==\"\"THE_END\"\")\n        return 0;\n    arr[0].name=movie;\n    arr[0].rating=rate;\n    arr[0].flag=1;\n    k=1;\n    while(1)\n    {\n        j=0;\n        cin>>movie;\n        if(movie!=\"\"THE_END\"\")\n        {   \n            cin>>rate;\n//            for(j=0;arr[j].flag!=0;j++)\n            while(arr[j].flag!=0)\n            {\n                if(movie==arr[j].name)\n                {\n                    arr[j].rating+=rate;\n                    arr[j].flag++;\n                    break;\n                }\n                else \n                    j++;\n            }\n            if(arr[j].flag==0)\n            {\n                arr[j].name=movie;\n                arr[j].rating=rate;\n                arr[j].flag=1;    \n                k++;\n            }\n        }\n        else\n            break;\n    }\n    for(i=0;i<k-1;i++)\n        for(j=i+1;j<k;j++)\n            if(arr[i].name>arr[j].name)\n            {\n                temp=arr[i];\n                arr[i]=arr[j];\n                arr[j]=temp;\n            }\n    for(i=0;i<k-1;i++)\n        for(j=i+1;j<k;j++)\n            if((arr[i].rating/arr[i].flag)<(arr[j].rating/arr[j].flag))\n            {\n                temp=arr[i];\n                arr[i]=arr[j];\n                arr[j]=temp;\n            }        \n    cout<<arr[0].name<<\"\" \"\"<<fixed<<setprecision(1)<<(arr[0].rating/arr[0].flag);        \n    return 0;\n}",
    "name": "200240320010.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320017.cpp"
  },
  {
    "code": "//#include <iostream>\n#include <bits/stdc++.h>\n//#include <vector>\n//#include <string>\nusing namespace std;\ntypedef float newfloat;\ntypedef double newdouble;\nvoid print_res( string max_movie_name , newfloat max_avgRating );\nvoid sum(int a,int b);\nvoid average();\nvoid product(newfloat a,newfloat b);\nclass MOVIE_RATING\n{\nprivate:\n    \n    string movName; // stores movie name\n    int dummy_int;\n    int dummy_int1;\n    int dummy_int2;\n    int dummy_int3;\n    string dummy_str;\n    newfloat totRating; // stores sum total of all ratings\n    newfloat dummy_float;\n    newdouble dummy_double;\n    string dummy_str2;\n    string dummy_str3;\n    newfloat totReviewer; // stores sum total of all reviewers\n\npublic:\n    string get_movName()\n    {\n        string temp_str = \"\"nothing\"\";\n        map< string , pair<newfloat,newfloat> > temp_map;\n        map< string , pair<newfloat,newfloat> > :: iterator itr;\n        itr = temp_map.find(temp_str);\n        \n        if( itr != temp_map.end() ){\n            itr->second.first = itr->second.first + 0;\n            itr->second.second = itr->second.second + 0;\n        }\n        \n        return movName;\n        int sum = 0;\n        for( int x = 0 ; x < 2 ; x++ ){\n             sum = sum + x;\n        }\n        \n    }\n\n    MOVIE_RATING ( string movName, newfloat totRating ) //parameterized constructor\n    {\n        int temp_num1 = 0;\n         while(0){\n            int cnt;\n            cnt++;\n            cnt = 0;\n        }\n        temp_num1++;\n        \n        this->movName = movName;\n        string temp_str = \"\"\"\";\n        newdouble nothing = 0;\n        if( nothing == 0 )\n            nothing += 0;\n        else\n            nothing = 0;\n        this->totRating = totRating;\n        temp_num1 = 0;\n        this->totReviewer = 1;\n    }\n    \n    MOVIE_RATING()  // zero parameter constructor\n    {   \n        int temp_num = 0;\n        movName = \"\"\"\";\n        string abc = \"\"\"\";\n        if( abc == \"\"abc\"\" )\n            abc = \"\"\"\";\n        else\n            abc = \"\"\"\";\n        newdouble nothing = 0;\n        nothing++;\n        if( nothing == 1 )\n            nothing = 0;\n        else if( nothing == 0 )\n            nothing = 0;\n        else\n            nothing = 0;\n        totRating = -1;\n        int xyz = 0;\n        xyz++;\n        xyz = 0;\n        totReviewer = -1;\n        int sum = 0;\n        for( int x = 0 ; x < 2 ; x++ ){\n             sum = sum + 0;\n        }\n    }\n    \n    //Getter-Setter Functions\n    newfloat get_totRating()\n    {\n        int sum = 0;\n        int temp_int = 0;\n        for( int x = 0 ; x < 2 ; x++ ){\n             sum = sum + 0;\n        }\n        return totRating;\n        temp_int++;\n        temp_int = 0;\n        string temp_str = \"\"nothing\"\";\n        temp_str = \"\"anything\"\";\n        while(0){\n            int cnt;\n            cnt++;\n            cnt = 0;\n        }\n        \n    }\n    void set_totRating(newfloat totRating)\n    {\n        vector<int> dummy_vec;\n        for( int i = 0 ; i < 5 ; i++ ){\n            dummy_vec.push_back(i);\n        }\n        sort(dummy_vec.begin(),dummy_vec.end());\n        this->totRating = totRating;\n        int a = 0;\n        a--;\n        if( a == -1 )\n            a = 0;\n        else\n            a = 1;\n    }\n\n    \n    newfloat get_totReviewer()\n    {\n        \n        int sum = 0;\n        \n        while(0){\n            int cnt;\n            cnt++;\n            cnt = 0;\n        }\n        for( int x = 0 ; x < 2 ; x++ ){\n             sum = sum + x;\n        }\n        \n        return totReviewer;\n\n        for( int x = 0 ; x < 2 ; x++ ){\n             sum = sum + x;\n        }\n        \n        for( int x = 0 ; x < 2 ; x++ ){\n             sum = sum + x;\n        }\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        vector<int> dummy_vec;\n        for( int i = 0 ; i < 5 ; i++ ){\n            dummy_vec.push_back(i);\n        }\n        sort(dummy_vec.begin(),dummy_vec.end());\n        \n        totReviewer++;\n        string temp_str = \"\"\"\";\n        if( temp_str == \"\"abc\"\" )\n            temp_str = \"\"\"\";\n            \n        int sum = 0;\n        for( int x = 0 ; x < 2 ; x++ ){\n             sum = sum + x;\n        }\n            \n    }\n\n    //average calculation function\n    newfloat get_avgRating() // function to get avg rating\n    {\n        int sum = 0;\n        \n        newfloat avg = totRating/totReviewer;\n        \n        for( int x = 0 ; x < 2 ; x++ ){\n             sum = sum + 0;\n        } \n        \n        if( sum == 0 )\n            sum = 0;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        \n        for( int x = 0 ; x < 2 ; x++ ){\n             sum = sum + x;\n        }\n        \n        avg = (newfloat)avg / 10; // round off average to one decimal\n        \n        \n        for( int x = 0 ; x < 2 ; x++ ){\n             sum = sum + 0;\n        }\n        while(0){\n            int cnt;\n            cnt++;\n            cnt = 0;\n        }\n        \n        string temp_str = \"\"\"\";\n        int temp_int = 0;\n        \n        return avg;\n        \n        int cnt = 0;\n        while( cnt < 3){\n            int a =0;\n            cnt++;\n        }\n    }\n};\n\nvoid product(newfloat a,newfloat b){\n    newfloat res;\n    res = a * b;\n    cout << res << endl;\n}\n\nint main()\n{\n    string temp_str;\n    for( int i = 0 ; i < 5 ; i++ ){\n        int temp_sum = 0;\n        temp_sum = temp_sum + i;\n    }\n    \n    int sum = 0;\n    \n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    while(0){\n        int cnt;\n        cnt++;\n        cnt = 0;\n    }\n    while(0){\n        int cnt;\n        cnt++;\n        cnt = 0;\n    }\n    newfloat current_rating;\n    \n    for( int x = 0 ; x < 2 ; x++ ){\n             sum = sum + 0;\n        }\n    \n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n        for( int x = 0 ; x < 2 ; x++ ){\n            if( sum ==0 )\n             sum = sum + 0;\n            else \n            sum = 0;\n        }\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n        {\n            for( int x = 0 ; x < 2 ; x++ ){\n                if( sum ==0 )\n                    sum = sum + 0;\n                else \n                    sum = 0;\n            }\n            break;\n        }\n        else\n        {\n            cin >> current_rating; // stores current rating\n            \n            for( int x = 0 ; x < 2 ; x++ ){\n                if( sum ==0 )\n                    sum = sum + 0;\n                else \n                    sum = 0;\n            }\n            \n            int search_Movie(string current_movie, vector <MOVIE_RATING> movie_List);\n            \n            for( int x = 0 ; x < 2 ; x++ ){\n                if( sum ==0 )\n                    sum = sum + 0;\n                else \n                    sum = 0;\n            }\n            \n            while(0){\n                int cnt;\n                cnt++;\n                cnt = 0;\n            }\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n            \n            for( int x = 0 ; x < 2 ; x++ ){\n                if( sum ==0 )\n                    sum = sum + 0;\n                else \n                    sum = 0;\n            }\n            for( int x = 0 ; x < 2 ; x++ ){\n                if( sum ==0 )\n                    sum = sum + 0;\n                else \n                    sum = 0;\n            }\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                for( int x = 0 ; x < 2 ; x++ ){\n                    if( sum ==0 )\n                        sum = sum + 0;\n                    else \n                        sum = 0;\n                }\n                \n                MOVIE_RATING newMovie(current_movie, current_rating);\n                \n                for( int x = 0 ; x < 2 ; x++ ){\n                if( sum ==0 )\n                    sum = sum + 0;\n                else \n                    sum = 0;\n                }\n                movie_List.push_back(newMovie);\n                \n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                for( int x = 0 ; x < 2 ; x++ ){\n                    if( sum ==0 )\n                        sum = sum + 0;\n                    else \n                        sum = 0;\n                }\n                newfloat new_totRating = movie_List[Movie_Index].get_totRating();\n                \n                for( int x = 0 ; x < 2 ; x++ ){\n                    if( sum ==0 )\n                        sum = sum + 0;\n                    else \n                        sum = 0;\n                }\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                \n                vector<int> dummy_vec;\n                for( int i = 0 ; i < 5 ; i++ ){\n                    dummy_vec.push_back(i);\n                }\n                sort(dummy_vec.begin(),dummy_vec.end());\n                \n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                \n                for( int x = 0 ; x < 2 ; x++ ){\n                    if( sum ==0 )\n                        sum = sum + 0;\n                    else \n                        sum = 0;\n                }\n                \n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n                \n                while(0){\n                    int cnt;\n                    cnt++;\n                    cnt = 0;\n                }\n                string temp_str1 = \"\"\"\";\n                \n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    vector<int> dummy_vec;\n    for( int i = 0 ; i < 5 ; i++ ){\n        dummy_vec.push_back(i);\n    }\n    sort(dummy_vec.begin(),dummy_vec.end());\n    for( int x = 0 ; x < 2 ; x++ ){\n        if( sum ==0 )\n            sum = sum + 0;\n        else \n            sum = 0;\n    }\n            \n    newfloat max_avgRating = movie_List[0].get_avgRating();\n    \n    for( int x = 0 ; x < 2 ; x++ ){\n        if( sum ==0 )\n            sum = sum + 0;\n        else \n            sum = 0;\n    }\n    \n    while(0){\n        int cnt;\n        cnt++;\n        cnt = 0;\n    }\n    \n    for( int x = 0 ; x < 2 ; x++ ){\n        if( sum ==0 )\n            sum = sum + 0;\n        else \n            sum = 0;\n    }\n    string max_movie_name = movie_List[0].get_movName();\n\n    for( int i = 0 ; i < 5 ; i++ ){\n        dummy_vec.push_back(i);\n    }\n    sort(dummy_vec.begin(),dummy_vec.end());\n    \n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        while(0){\n            int cnt;\n            cnt++;\n            cnt = 0;\n        }\n        string movie = movie_List[i].get_movName();\n        \n        for( int x = 0 ; x < 2 ; x++ ){\n            if( sum ==0 )\n                sum = sum + 0;\n            else \n                sum = 0;\n        }\n        \n        newfloat rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        \n        for( int x = 0 ; x < 2 ; x++ ){\n            if( sum ==0 )\n                sum = sum + 0;\n            else \n                sum = 0;\n        }\n        \n        for( int x = 0 ; x < 2 ; x++ ){\n            if( sum ==0 )\n                sum = sum + 0;\n            else \n                sum = 0;\n        }\n        \n        if (max_avgRating == rating) // check if rating are equal\n        {\n            while(0){\n                int cnt;\n                cnt++;\n                cnt = 0;\n            }\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                while(0){\n                    int cnt;\n                    cnt++;\n                    cnt = 0;\n                }\n                max_movie_name = movie;\n                \n                while(0){\n                int cnt;\n                cnt++;\n                cnt = 0;\n            }\n            }\n        }\n    }\n    \n    for( int x = 0 ; x < 2 ; x++ ){\n        while(0){\n            int cnt;\n            cnt++;\n            cnt = 0;\n        }\n        if( sum ==0 )\n            sum = sum + 0;\n        else \n            sum = 0;\n    }\n    while(0){\n                int cnt;\n                cnt++;\n                cnt = 0;\n            }\n    print_res( max_movie_name , max_avgRating );\n    \n    for( int x = 0 ; x < 2 ; x++ ){\n        if( sum ==0 )\n            sum = sum + 0;\n        else \n            sum = 0;\n    }\n    \n    \n    for( int x = 0 ; x < 2 ; x++ ){\n        if( sum ==0 )\n            sum = sum + 0;\n        else \n            sum = 0;\n    }\n    \n    return 0;\n}\n\nvoid average(){\n    cout << \"\"dummy function\"\" << endl;\n}\n\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            while(0){\n                int cnt;\n                cnt++;\n                cnt = 0;\n            }\n            if(movie_List[i].get_movName() == current_movie){    \n                while(0){\n                    int cnt;\n                    cnt++;\n                    cnt = 0;\n                }        \n                return i; //return index of the vector where movie is present\n            }\n        }\n        while(0){\n                int cnt;\n                cnt++;\n                cnt = 0;\n            }\n        return -1; //returns -1 if movie not present\n    }\n\nvoid print_res( string max_movie_name , newfloat max_avgRating ){\n    while(0){\n        int cnt;\n        cnt++;\n        cnt = 0;\n    }\n    cout << max_movie_name << \"\" \"\" ;  // print movie name\n    while(0){\n        int cnt;\n        cnt++;\n        cnt = 0;\n    }\n    //printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    cout << fixed << setprecision(1) << max_avgRating; \n}\n\nvoid sum(int a,int b){\n    int res;\n    res = a + b;\n    cout << res << endl;\n}",
    "name": "200240320020.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320022.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n     MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n\n   \n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    \n    float get_movieName(){\n        movName = this->movName;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    int reviewer()\n    {\n        return 2;\n    }\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320031.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320034.cpp"
  },
  {
    "code": "# include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string mName; \n    float ttRating; \n    float ttReviewer; \npublic:\n\n    \n    MOVIE_RATING ( string movName, float totRating ) \n    {\n        mName = movName;\n        ttRating = totRating;\n        ttReviewer = 1;\n    }\n    float get_totRating()\n    {\n        return ttRating;\n    }\n    MOVIE_RATING() \n    {\n        mName = \"\"\"\";\n        ttRating = -1;\n        ttReviewer = -1;\n    }\n   \n    \n    void set_totRating(float totRating)\n    {\n        this->ttRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return mName;\n    }\n    float get_totReviewer()\n    {\n        return ttReviewer;\n    }\n    void set_totReviewer() \n    {\n        ttReviewer++;\n    }\n\n    \n    float get_avgRating() \n    {\n        float avg = ttRating/ttReviewer;\n        avg = (int)(avg * 10 + 0.5);\n        avg = (float)avg / 10;\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) \n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; \n        }\n        return -1; \n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; \n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; \n\n        if(current_movie == \"\"THE_END\"\") \n            break;\n        else\n        {\n            cin >> current_rating; \n\n            int Movie_Index = search_Movie(current_movie, movie_List); \n\n            if(Movie_Index == -1) \n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  \n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; \n                movie_List[Movie_Index].set_totRating(new_totRating); \n                movie_List[Movie_Index].set_totReviewer();  \n            }\n        }\n    }\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) \n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating)\n        {\n            if( movie <  max_movie_name ) \n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  \n    printf(\"\"%.1f\"\", max_avgRating); \n    return 0;\n}",
    "name": "200240320038.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass movieRating\n{\n    string movie; // stores movie name\n    float ratingTot; // stores sum total of all ratings\n    float reviewerTot; // stores sum total of all reviewers\n\npublic:\n\n    movieRating()  // zero parameter constructor\n    {\n        movie = \"\"\"\";\n        ratingTot = -1;\n        reviewerTot = -1;\n    }\n    movieRating( string movie, float ratingTot ) //parameterized constructor\n    {\n        this->movie = movie;\n        this->ratingTot = ratingTot;\n        this->reviewerTot = 1;\n    }\n\n    //Getter-Setter Functions\n    \n    //average calculation function\n    float get_avg() // function to get avg rating\n    {\n        float a = ratingTot/reviewerTot;\n        float avg;\n        avg = (int)(a * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n    \n    void set_totRating(float ratingTot)\n    {\n        this->ratingTot = ratingTot;\n    }\n\n    string get_movName()\n    {\n        return movie;\n    }\n    float get_totReviewer()\n    {\n        return reviewerTot;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n       reviewerTot++;\n    }\n    float get_totRating()\n    {\n        return ratingTot;\n    }\n\n    \n};\nint find_Movie(string current_movie, vector <movieRating> movie_List); //search function to see if movie is already present\n    \nint main()\n{\n    vector <movieRating> movie_List; //vector to store all movies\n    float presentRating;\n    string presentMovie;\n    do\n    {\n        cin >> presentMovie; // stores current movie\n\n        if(presentMovie != \"\"THE_END\"\") \n        {\n            cin >> presentRating; // stores current rating\n\n            int movIndex = find_Movie(presentMovie, movie_List); //search if movie is already in the vector\n\n            if(movIndex == -1) // if movie not present in vector add movie in vector\n            {\n                movieRating newMovie(presentMovie, presentRating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float newRating = movie_List[movIndex].get_totRating();\n                newRating = newRating + presentRating; // new sum total of rating\n                movie_List[movIndex].set_totRating(newRating); //insert new sum total of rating to the same movie index\n                movie_List[movIndex].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n        else\n        {\n            break;\n        }//loop break condition\n    }while(1);\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avg();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avg();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}\nint find_Movie(string presentMovie, vector <movieRating> movie_List) //search function to see if movie is already present\n    {\n        int i=0;\n        while(i< movie_List.size())\n        {\n            if(movie_List[i].get_movName() == presentMovie)\n            return i; //return index of the vector where movie is present\n                i++;\n        }\n        return -1; //returns -1 if movie not present\n    }",
    "name": "200240320043.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320044.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName;\n    float totRating; // stores sum total of all ratings\n    float totReviewer;\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320045.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\n\nclass hello1{\n    \n    int a ;\n    int b;\n    int c,d,e,f,g,h,i,j,k;\n  \n  public:\n  \n   int hello(){\n       \n        \n        \n    }\n    \n    \n    \n    \n};\nclass MOVIE_RATING\n{\n    string movName;\n  \n// stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n    \n   void  myMovie(){\n        \n        int a,b,c,d,e,f;\n        string kuldeep;\n        \n        \n        c=a+b;\n        c=a+b;\n        c=a+b;\n        c=a+b;\n        c=a+b;\n        c=a+b;\n        \n    }\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n       \n        int a,b,c,d,e,f;\n        movName = \"\"\"\";\n         a=1;\n         b=2;\n         a=1;\n         b=2;\n        c= a+b;\n        totRating = -1;\n         c= a+b;\n         d=e=f=1;\n         d=e+f;\n         d++;\n         e++;\n         while(1){\n             break;\n         }\n        totReviewer = -1;\n        if(a==b){\n            c=1;\n        }\n        for(int i=0;i<4; i++){\n            i=i+1;\n        }\n        \n        \n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        int a,b,c,d,e,f;\n        this->movName = movName;\n         a=1;\n         b=2;\n         a=1;\n         b=2;\n         c= a+b;\n        this->totRating = totRating;\n         d=e=f=1;\n         c= a+b;\n         d=1;\n         d=e+f;\n         d++;\n         e++;\n        this->totReviewer = 1;\n        if(a==b){\n            c=1;\n        }\n        for(int i=0;i<4; i++){\n            i=i+1;\n        }\n        \n        \n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n     {\n         \n         int a,b,c,d,e,f;\n         a=1;\n         b=2;\n         a=1;\n         b=2;\n         c= a+b;\n        for(int i=0 ; i<4; i++){\n            \n            c=c+1;\n        }\n        while(1){\n            \n        return totRating;\n        \n        break;\n        }\n         d=e=f=1;\n         d++;\n         e++;\n         \n         for(int i=0;i<4; i++){\n            i=i+1;\n        }\n    }\n    void set_totRating(float totRating)\n    {\n         int a,b,c,d,e,f;\n         d=e=f=1;\n         d++;\n         e++;\n        while(1){\n        this->totRating = totRating;\n        break;\n        \n        }\n         a=1;\n         b=2;\n         a=1;\n         b=2;\n         c= a+b;\n    }\n\n    string get_movName()\n    {\n        \n        while(1){\n        return movName;\n        }\n        \n      \n        for(int i=0; i<4; i++){\n            \n            \n            i=i+1;\n            i++;\n        }\n        \n    }\n    float get_totReviewer()\n    {\n        int a,b;\n        a=b=1;\n        while(b){\n            \n        return totReviewer;\n         if(a==b){\n             \n             a=2;\n         }\n        }\n        \n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        for(int i=0; i<4; i++){\n            \n            \n            i=i+1;\n            i++;\n        }\n        \n        \n        int i;\n        i=10;\n        i=i+1;\n        while(1){\n            \n        \n        totReviewer++;\n        break;\n        \n        }\n        \n        for(int i=0;i<4; i++){\n            \n            i=i+1;\n        }\n        for(int i=0;i<4; i++){\n            \n            i=i+1;\n        }\n        \n        \n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        for(int i=0; i<4;i++){\n            \n            i=i+1;\n            \n        }\n        while(1){\n            \n        int a=1,b=2,c=3;\n       \n        \n        float avg,a1,b1,c1,d1 ;\n       \n       avg=totRating/totReviewer;\n       \n        hello1 p1;\n        \n        p1.hello();\n        \n        avg = (int)(avg * 10  +  0.5); //round off average to one decimal\n        avg = (float) avg / 10; // round off average to one decimal\n        return avg;\n        \n        }\n        \n        for(int i=0;i<4; i++){\n            i=i+1;\n        }\n    \n    \n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        \n        int i,t=0,e=0;\n        if(t==e){\n            \n            i=0;\n        }\n        while(i<movie_List.size()){\n            \n            if(movie_List[i].get_movName() == current_movie)\n                return i;\n            i++;\n            \n        }\n      \n      \n        return -1;\n        \n        for(int i=0;i<4; i++){\n            i=i+1;\n        }//returns -1 if movie not present\n    }\nint main()\n{\n    static int l=1;\n    hello1 h1;\n    h1.hello();\n    \n    \n    vector <MOVIE_RATING> movie_List;\n    \n    while(l){\n        \n        break;\n    }\n    //vector to store all movies\n    float current_rating,a,b,c=1;\n    \n    while(l){\n        \n        break;\n    }\n    \n    string current_movie;\n    \n    int r,q;\n    \n    switch(l){\n        \n        case 1: r=1;\n        \n        case 2: q=1;\n        \n        case 3: break;\n        \n        }\n    \n    \n    \n    \n    while(1)\n    {\n        \n        int a=1,b=1,c,d=1;\n        if( a==b)\n            d=2;\n            \n            c=(a*b+3);\n        \n        cin >> current_movie; // stores current movie\n        d=(a/b+ c/d +7 );\n    \n        if(current_movie == \"\"THE_END\"\"){\n            \n            \n        //loop break condition\n             d=(a/b+ c/d +7 );\n             a++;\n             b++;\n            break;\n        }\n        \n        else\n        {\n            \n             d=(a/b+ c/d +7 );\n             a++;\n             b++;\n            \n            cin >> current_rating; // stores current rating\n            \n            if(a==b||c==d)\n                d=3;\n\n            int Movie_Index = search_Movie(current_movie, movie_List);\n            \n            //search if movie is already in the vector\n             d=(a/b+ c/d +7 );\n             d=a+b;\n             d=a-b;\n             d++;\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                d=(a/b+ c/d +7 );\n               d=a+b;\n               d=a-b;\n                d++;\n                \n                \n                MOVIE_RATING newMovie(current_movie, current_rating);\n                \n                \n                d=(a/b+ c/d +7 );\n                  d=a+b;\n                     d=a-b;\n                    d++;\n                    \n                    \n                movie_List.push_back(newMovie);\n                \n                d=(a/b+ c/d +7 );\n               d=a+b;\n              d=a-b;\n             d++;\n             \n            }\n            \n            \n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                \n                while(1){\n                    break;\n                }\n                \n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                \n                \n                while(1){\n                    break;\n                }\n                \n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                \n                \n                for(int i =0; i<4; i++){\n                    \n                    i=i+1;\n                }\n                \n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                \n              for(int i =0; i<4; i++){\n                    \n                    i=i+1;\n                }\n                \n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n                \n                \n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    \n    while(1){\n        \n        int a=1,b=1,c=1,d=2;\n         d=(a/b+ c/d +7 );\n               d=a+b;\n              d=a-b;\n             d++;\n             break;\n        \n        \n    }\n    \n    \n    float max_avgRating = movie_List[0].get_avgRating();\n    \n    hello1 h2,h3,h4;\n    h4.hello();\n    \n    \n    \n    string max_movie_name = movie_List[0].get_movName();\n    \n    h2.hello();\n    h3.hello();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        int z=1;\n        while(1){\n            \n            \n            int a,b,c;\n            a=1,b=1;\n            c=a+b;\n            break;\n        }\n        \n        string movie = movie_List[i].get_movName();\n        \n        switch(z){\n            \n            case 1: break;\n        }\n        \n        float rating = movie_List[i].get_avgRating();\n        switch(z){\n            \n            case 1: break;\n        }\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n            switch(z){\n            \n            case 1: break;\n        }\n            \n           max_avgRating = rating;\n           while(1){\n               break;\n           }\n           max_movie_name = movie;\n           switch(z){\n            \n            case 1: break;\n        }\n        \n        \n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            \n            switch(z){\n            \n            case 1: break;\n        }\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                z++;\n                max_movie_name = movie;\n                z--;\n            }\n            \n            \n        }\n        \n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320049.cpp"
  },
  {
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n   /* MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }*/\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    do{\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n   } while(1);\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320050.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n//#include<multi_map>\n#include<stack>\n#include<queue>\n#include<fstream>\n#include<istream>\n#include<ostream>\n//#include<unordered_map>\n#include <string>\ntypedef int INT;\n//typedef using USING;\n//typedef vector VECTOR;\ntypedef float FLOAT;\n//typedef return retun;\n//typedef this THIS;\n//typedef if IF;\n//typedef class CLASS;\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName;\n    INT LAXMAN ;// stores movie name\n    FLOAT totRating;\n    INT EXCUSE;// stores sum total of all ratings\n    FLOAT totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING(INT demo, INT style)  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        LAXMAN=10;\n        totRating = -1;\n        EXCUSE = 11;\n        totReviewer = -1;\n        INT hi = demo;\n        INT hellow = 12456;\n    }\n    MOVIE_RATING ( string movName, FLOAT totRating,INT demo,string yash ) //parameterized constructor\n    {\n        this->LAXMAN=demo;\n        this->movName = (movName+\"\"\"\");\n        string shaky = \"\"yz\"\";\n        this->EXCUSE=EXCUSE+demo;\n        INT LAXU=1;\n        this->totRating = (totRating+1)-1;\n        string sohan = \"\"cc\"\";\n        this->totReviewer = (1-1)+1;\n        INT y = 1+2+5+9;\n    }\n\n    //Getter-Setter Functions\n     FLOAT get_totRating()\n    {\n        INT y = 1+2+5+9;\n        return totRating;\n        string kuldeep=\"\"hi\"\";\n    }\n    void set_totRating(FLOAT totRating)\n    {\n        INT x = 1+2+5+9;\n        this->totRating = totRating;\n        INT y = 1+2+5+9;\n    }\n\n    string get_movName()\n    {\n        INT x = 1+2+5+9;\n        return movName;\n        INT y = 1+2+5+9;\n    }\n    FLOAT get_totReviewer()\n    {\n        INT x = 1+2+5+9;\n        return totReviewer;\n        INT y = 1+2+5+9;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        INT x = 1+2+5+9;\n        totReviewer++;\n        INT y = 1+2+5+9;\n    }\n\n    //average calculation function\n    FLOAT get_avgRating() // function to get avg rating\n    {\n        INT x = 1+2+5+9;\n        FLOAT avg = totRating/totReviewer;\n        INT y = 1+2+5+9;\n        INT Z = 10 + 0.5;\n        INT L = 10;\n        avg = (INT)(avg * Z); //round off average to one decimal\n        avg = ( avg / L); // round off average to one decimal\n        return avg;\n    }\n};\nINT search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        INT i = 0;\n        for(i; i< movie_List.size(); i++)\n        {\n            INT xyz = 0;\n            INT yz = 0;\n            INT z = 0;\n            if(movie_List[i].get_movName() == current_movie && z==0){\n                return i; //return index of the vector where movie is present\n                string laxman= \"\"is good boy\"\";\n                if(laxman == \"\"is good boy\"\"){\n                    cout<<\"\"hi\"\";\n                }\n            } \n       }\n        return -1;\n        string laxman= \"\"is good boy\"\";\n                if(laxman == \"\"is good boy\"\"){\n                    cout<<\"\"hi\"\";\n                }//returns -1 if movie not present\n    }\nINT main()\n{\n    vector <MOVIE_RATING> movie_List; \n    INT XYS = 100;//vector to store all movies\n    FLOAT current_rating;\n    INT YS = 100;\n    string current_movie;\n    INT S = 100;\n    while(true)\n    {\n        cin >> current_movie; // stores current movie\n        INT sumbit = 100;\n        if(current_movie == \"\"THE_END\"\" && sumbit ==100){ //loop break condition\n            break;\n            string laxman= \"\"is good boy\"\";\n                if(laxman == \"\"is good boy\"\"){\n                    cout<<\"\"hi\"\";\n                }\n        }\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                INT demo = 1;\n                string yash=\"\"yash patil\"\";\n                MOVIE_RATING newMovie(current_movie, current_rating,demo,yash);\n                string pranay=\"\"bhai hai bhai\"\";\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n               FLOAT  new_totRating = movie_List[Movie_Index].get_totRating();\n               string laxman= \"\"is good boy\"\";\n                if(laxman == \"\"is good boy\"\"){\n                }\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n               string laxman1= \"\"is good boy\"\";\n                if(laxman1 == \"\"is good boy\"\"){\n                }\n               movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                string laxman2= \"\"is good boy\"\";\n                if(laxman2 == \"\"is good boy\"\"){\n                }\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n                string laxman3= \"\"is good boy\"\";\n                if(laxman3 == \"\"is good boy\"\"){\n                }\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    FLOAT max_avgRating = movie_List[0].get_avgRating();\n    string laxman= \"\"is good boy\"\";\n                if(laxman == \"\"is good boy\"\"){\n                }\n    string max_movie_name = movie_List[0].get_movName();\n    string laxman1= \"\"is good boy\"\";\n                if(laxman1 == \"\"is good boy\"\"){\n                }\n\n    for(INT i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        FLOAT rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating && laxman==\"\"is good boy\"\") // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           INT ghi=100;\n           max_movie_name = movie;\n           INT ghi1=100;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                INT ghi1=100;\n                max_movie_name = movie;\n                INT ghi=100;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating);\n    INT ghi=100;// print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320051.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (avg * 10); \n        avg=(int)(avg+0.5);//round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        int i=0;\n        while(i< movie_List.size())\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i;\n                \n            i++;    //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\n        \n       \nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n\n    int i=1;\n\nwhile( i<movie_List.size())\n{\n\n   \n     string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n         i++;\n}\n\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320056.cpp"
  },
  {
    "code": "# include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // declaring data members\n    float totRating; \n    float totReviewer; \n\npublic:\n\n    MOVIE_RATING()  //  parameterlesss constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) // two parameter parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;  //initialising data members\n        this->totReviewer = 1;\n    }\n\n    float get_totRating() //to get the total rating\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating) //to set the total rating\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()  //to get the movie name\n    {\n        return movName;\n    }\n    float get_totReviewer() //to get the review of person\n    {\n        return totReviewer; \n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); \n        avg = (float)avg / 10; \n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) \n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //index of vector \n        }\n        return -1; // when there is no movie\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; \n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // taking input of movies from user\n\n        if(current_movie == \"\"THE_END\"\") //input breaking condition\n            break;\n        else\n        {\n            cin >> current_rating; // taking input of rating of movie from user\n\n            int Movie_Index = search_Movie(current_movie, movie_List); \n\n            if(Movie_Index == -1) \n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  \n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; \n                movie_List[Movie_Index].set_totRating(new_totRating); \n                movie_List[Movie_Index].set_totReviewer();  \n            }\n        }\n    }\n    \n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating )\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) \n        {\n            if( movie <  max_movie_name ) \n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320057.cpp"
  },
  {
    "code": "# include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = 0;\n        totReviewer = 0;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320061.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totRating; // stores sum total of all ratings\n    float totReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totRating = -1;\n        totReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totRating = totRating;\n        this->totReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    float get_totRating()\n    {\n        return totRating;\n    }\n    void set_totRating(float totRating)\n    {\n        this->totRating = totRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    float get_totReviewer()\n    {\n        return totReviewer;\n    }\n    void set_totReviewer() //function call increases reviewers by 1;\n    {\n        totReviewer++;\n    }\n\n    //average calculation function\n    float get_avgRating() // function to get avg rating\n    {\n        float avg = totRating/totReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (float)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    float current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                float new_totRating = movie_List[Movie_Index].get_totRating();\n                new_totRating = new_totRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totRating(new_totRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    float max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        float rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320064.cpp"
  },
  {
    "code": "#include<iostream>\n#include<bits/stdc++.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nclass movie_Rating\n{\n    string mname; //movie name\n    float totalr; //total ratings\n    int totalreview; //total reviewers\n    \n    public:\n     movie_Rating()\n     {\n         mname=\"\" \"\";\n         totalr=-1;\n         totalreview=-1;;\n     }\n     \n     movie_Rating(string movien, float treview)\n     {\n         //cout<<\"\"in constructor\"\";\n         mname=movien;\n         totalr=treview;\n         totalreview=1;\n    }\n    \n    string get_mname()\n    {\n        return mname;\n    }\n    void set_totalr(float treview)\n    {\n        totalr=treview;\n    }\n    float get_totalr()\n    {\n        return totalr;\n    }\n    void set_totalreview()\n    {\n        totalreview=totalreview+1;\n    }\n    \n    float avg_rating()\n    {\n       // cout<<\"\"in avg rating\"\";\n       //cout<<totalr<<\"\" \"\"<<totalreview<<endl;\n        float average = totalr/totalreview;\n        average = (int)(average * 10 + 0.5);\n        average = (float)average/10;\n        //cout<<\"\"average = \"\"<<average<<endl;\n        return average;\n    }\n};\n\nint movie_Search(string movie_curr, vector <movie_Rating> mlist)\n{   \n    for(int i = 0; i< mlist.size(); i++)\n    {\n        if(mlist[i].get_mname() == movie_curr)\n        return i;\n    }    \n    \n    return -1;\n    \n}\n\nint main()\n{\n    //cout<<\"\"in main\"\";\n    vector <movie_Rating> mlist;\n    float rating_curr;\n    string movie_curr;\n    \n    while(1)\n    {\n        //cout<<\"\"in while\"\"<<endl;\n        cin>>movie_curr;\n        //cout<<\"\"movie_curr\"\"<<endl;\n        if(movie_curr == \"\"THE_END\"\")\n            break;\n        else\n        {\n            //cout<<\"\"in 1st else\"\"<<endl;\n            cin>>rating_curr;\n            //cout<<\"\"got ratings\"\"<<endl;\n            int index = movie_Search(movie_curr, mlist);\n            //cout<<\"\"index = \"\"<<index<<endl;\n            //cout<<\"\"fun call done\"\"<<endl;\n            if(index == -1) \n            {\n                //cout<<\"\"in if 1\"\";\n               movie_Rating newm(movie_curr, rating_curr);\n               mlist.push_back(newm);\n            }\n            \n            else\n            {\n                //cout<<\"\"in else 1\"\";\n                float new_total = mlist[index].get_totalr();\n                new_total = new_total + rating_curr;\n                mlist[index].set_totalr(new_total);\n                mlist[index].set_totalreview();\n            }\n        }\n        \n     }\n     \n     float max_rating = mlist[0].avg_rating();\n     string max_mname = mlist[0].get_mname();\n     \n     for(int i=1; i < mlist.size(); i++)\n     {\n         //cout<<\"\"in for 1\"\";\n         string movie_name = mlist[i].get_mname();\n         float mrating = mlist[i].avg_rating();\n         \n         if(max_rating < mrating )\n         {\n             //cout<<\"\"in if 2\"\";\n             max_rating = mrating;\n             max_mname = movie_name;\n         }\n         if(max_rating == mrating)\n         {\n             //cout<<\"\"in if 3\"\";\n             if(movie_name < max_mname)\n             {\n                 max_mname = movie_name;\n             }\n         }\n     }\n     \n     cout<<max_mname<<\"\" \"\";\n     cout<<fixed<<setprecision(1)<<max_rating;\n     return 0;\n    \n}",
    "name": "200240320066.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\ntypedef float flo;\nusing namespace std;\nclass MOVIE_RATING\n{\n    string movName; // stores movie name\n    float totalRating; // stores sum total of all ratings\n    float totalReviewer; // stores sum total of all reviewers\n\npublic:\n\n    MOVIE_RATING()  // zero parameter constructor\n    {\n        movName = \"\"\"\";\n        totalRating = -1;\n        totalReviewer = -1;\n    }\n    MOVIE_RATING ( string movName, float totalRating ) //parameterized constructor\n    {\n        this->movName = movName;\n        this->totalRating = totalRating;\n        this->totalReviewer = 1;\n    }\n\n    //Getter-Setter Functions\n    flo get_totalRating()\n    {\n        return totalRating;\n    }\n    void set_totalRating(flo totalRating)\n    {\n        this->totalRating = totalRating;\n    }\n\n    string get_movName()\n    {\n        return movName;\n    }\n    flo get_totalReviewer()\n    {\n        return totalReviewer;\n    }\n    void set_totalReviewer() //function call increases reviewers by 1;\n    {\n        totalReviewer++;\n    }\n\n    //average calculation function\n    flo get_avgRating() // function to get avg rating\n    {\n        flo avg = totalRating/totalReviewer;\n        avg = (int)(avg * 10 + 0.5); //round off average to one decimal\n        avg = (flo)avg / 10; // round off average to one decimal\n        return avg;\n    }\n};\nint search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) //search function to see if movie is already present\n    {\n        for(int i = 0; i< movie_List.size(); i++)\n        {\n            if(movie_List[i].get_movName() == current_movie)\n                return i; //return index of the vector where movie is present\n        }\n        return -1; //returns -1 if movie not present\n    }\nint main()\n{\n    vector <MOVIE_RATING> movie_List; //vector to store all movies\n    flo current_rating;\n    string current_movie;\n    while(1)\n    {\n        cin >> current_movie; // stores current movie\n\n        if(current_movie == \"\"THE_END\"\") //loop break condition\n            break;\n        else\n        {\n            cin >> current_rating; // stores current rating\n\n            int Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n\n            if(Movie_Index == -1) // if movie not present in vector add movie in vector\n            {\n                MOVIE_RATING newMovie(current_movie, current_rating);\n                movie_List.push_back(newMovie);\n            }\n            else  //if movie present in vector, add the rating in total rating and increase the number of reviewers\n            {\n                flo new_totalRating = movie_List[Movie_Index].get_totalRating();\n                new_totalRating = new_totalRating + current_rating; // new sum total of rating\n                movie_List[Movie_Index].set_totalRating(new_totalRating); //insert new sum total of rating to the same movie index\n                movie_List[Movie_Index].set_totalReviewer();  //increases reviewers count by 1\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    flo max_avgRating = movie_List[0].get_avgRating();\n    string max_movie_name = movie_List[0].get_movName();\n\n    for(int i = 1; i < movie_List.size(); i++)\n    {\n        string movie = movie_List[i].get_movName();\n        flo rating = movie_List[i].get_avgRating();\n\n        if( max_avgRating < rating ) // check for maximum avg rating\n        {\n           max_avgRating = rating;\n           max_movie_name = movie;\n        }\n        if (max_avgRating == rating) // check if rating are equal\n        {\n            if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n            }\n        }\n    }\n    cout << max_movie_name << \"\" \"\";  // print movie name\n    printf(\"\"%.1f\"\", max_avgRating); // print max avg rating upto 1 decimal\n    return 0;\n}",
    "name": "200240320067.cpp"
  },
  {
    "code": "#include <iostream>\n#include <bits/stdc++.h>\n#include <vector>\n#include <string>\nusing namespace std;typedef float pranay;typedef int CDAC;typedef void KHARGHAR;\n\n\nclass MOVIE_RATING{string movName;pranay totRating;pranay totReviewer; public:\n\n    MOVIE_RATING()  {  pranay a=10; movName = \"\"\"\";  totRating = -1;totReviewer = -1; }MOVIE_RATING ( string movName, pranay totRating ) {\n        this->movName = movName;this->totRating = totRating;this->totReviewer = 1;\n    }inline pranay get_totRating(){ for(int m=0;m<10;m++){} return totRating; }KHARGHAR set_totRating(pranay totRating)\n    {this->totRating = totRating;\n    }\n    \n    void AAA(pranay v){}\n\n   inline string get_movName(){ pranay a=10; return movName;\n    }\n     void AA(pranay v){}\n    inline pranay get_totReviewer()\n    {\n         pranay a=10;\n         for(int m=0;m<10;m++){}\n        return totReviewer;\n    }\n     void AbA(pranay v){}\n    inline KHARGHAR set_totReviewer() {totReviewer++;\n    }\n     void AoA(pranay v){}\ninline pranay get_avgRating() {pranay avg = totRating/totReviewer;\n        avg = (CDAC)(avg * 10 + 0.5); avg = (pranay)avg / 10;\n        for(int m=0;m<10;m++){}\n        return avg;\n    }\n    \n     void pAA(pranay v){}\n};\n\n void AlA(pranay v){}\ninline CDAC search_Movie(string current_movie, vector <MOVIE_RATING> movie_List) \n    {\n        \n        CDAC i = 0;\n         for(int m=0;m<10;m++){}\n          pranay a=10;\n        for(; i< movie_List.size();)\n        {\n            \n             pranay a=10;\n            if(movie_List[i].get_movName() == current_movie)\n             \n            \n                return i; \n                 for(int m=0;m<10;m++){}\n                i++;\n        }\n        return -1; \n    }\n CDAC main()\n{\n    \n    pranay a=10;\n    vector <MOVIE_RATING> movie_List; pranay current_rating;string current_movie;\n    while(1)\n    {\n         for(int m=0;m<10;m++){}\n        cin >> current_movie; if(current_movie == \"\"THE_END\"\")break;else{cin >> current_rating; \n for(int m=0;m<10;m++){}\n            CDAC Movie_Index = search_Movie(current_movie, movie_List); //search if movie is already in the vector\n for(int m=0;m<10;m++){}\n            if(Movie_Index == -1) {MOVIE_RATING newMovie(current_movie, current_rating);movie_List.push_back(newMovie); }\n            else {pranay new_totRating = movie_List[Movie_Index].get_totRating(); for(int m=0;m<10;m++){}\n                new_totRating = new_totRating + current_rating;   for(int m=0;m<10;m++){}\n             movie_List[Movie_Index].set_totRating(new_totRating);  movie_List[Movie_Index].set_totReviewer();  //increases reviewers count by 1\n            \n             for(int m=0;m<10;m++){}\n            }\n        }\n    }\n    //Code to find maximum avg rating according to dictionary order\n    pranay max_avgRating = movie_List[0].get_avgRating();\n     for(int m=0;m<10;m++){}\n    string max_movie_name = movie_List[0].get_movName();\n\n    CDAC i = 1;\n    for(; i < movie_List.size(); )\n    {\n         pranay a=10;\n        string movie = movie_List[i].get_movName();\n         for(int m=0;m<10;m++){}\n        pranay rating = movie_List[i].get_avgRating();\n for(int m=0;m<10;m++){}\n        if( max_avgRating < rating ) { max_avgRating = rating;\n           max_movie_name = movie;}if (max_avgRating == rating) \n        {if( movie <  max_movie_name ) //change the movie name according to dictionary order\n            {\n                max_movie_name = movie;\n                 for(int m=0;m<10;m++){}\n            }\n        }\n        \n        i++;\n    }cout << max_movie_name << \"\" \"\"; for(int m=0;m<10;m++){}  printf(\"\"%.1f\"\", max_avgRating); \n    return 0;\n}\n\n\n void AqqA(pranay v){}",
    "name": "200240320072.cpp"
  }
]